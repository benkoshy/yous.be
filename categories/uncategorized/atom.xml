<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Uncategorized | Yous]]></title>
  <link href="http://blog.yous.be/categories/uncategorized/atom.xml" rel="self"/>
  <link href="http://blog.yous.be/"/>
  <updated>2014-04-01T23:24:25+09:00</updated>
  <id>http://blog.yous.be/</id>
  <author>
    <name><![CDATA[Yous]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Syntax Highlighting Test]]></title>
    <link href="http://blog.yous.be/2013/12/03/syntax-highlighting-test/"/>
    <updated>2013-12-03T05:40:30+09:00</updated>
    <id>http://blog.yous.be/2013/12/03/syntax-highlighting-test</id>
    <content type="html"><![CDATA[<p><code>
So guys
whats up
</code></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (test.js)</span> <a href='/downloads/code/test.js'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">sample javascript from xui</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="kc">undefined</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">xui</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">window</span>     <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">string</span>     <span class="o">=</span> <span class="k">new</span> <span class="nb">String</span><span class="p">(</span><span class="s1">&#39;string&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nb">document</span>   <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">simpleExpr</span> <span class="o">=</span> <span class="sr">/^#?([\w-]+)$/</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">idExpr</span>     <span class="o">=</span> <span class="sr">/^#/</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">tagExpr</span>    <span class="o">=</span> <span class="sr">/&lt;([\w:]+)/</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">slice</span>      <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">[].</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="p">};</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">slice</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">nodeType</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span> <span class="nx">slice</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="kd">var</span> <span class="nx">ret</span><span class="o">=</span><span class="p">[];</span> <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">ret</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span> <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span> <span class="p">};</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">x$</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">xui</span> <span class="o">=</span> <span class="nx">xui</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nx">xui</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span> <span class="nx">context</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>``` html
&lt;!DOCTYPE html PUBLIC &ldquo;&ndash;//W3C//DTD HTML 4.01 Transitional//EN&rdquo;>
<html><head>
<title>A Tiny Page</title></p>



<p></head><!-- real comment -->
<body bgcolor="#FFFFFF" text="#000000" link="#0000CC"></p>

<script language="javascript" type="text/javascript">
      function changeHeight(h) {
        var tds = document.getElementsByTagName("td");
        for(var i = 0; i < tds.length; i++) {
          tds[i].setAttribute("height", h + "px");
      }}
</script>


<h1>abc</h1>


<h2>def</h2>


<p>Testing page</p>


<p></body></html>
```</p>

<p><div><script src='https://gist.github.com/2219214.js'></script>
<noscript><pre><code>desc &quot;Edit a post (defaults to most recent)&quot;
task :edit_post, :title do |t, args|
  args.with_defaults(:title =&gt; false)
  posts = Dir.glob(&quot;#{source_dir}/#{posts_dir}/*.*&quot;)
  post = (args.title) ? post = posts.keep_if {|post| post =~ /#{args.title}/}.last : posts.last
  if post
    puts &quot;Opening #{post} with #{editor}...&quot;
    system &quot;#{ENV[&#39;EDITOR&#39;]} #{post} &amp;&quot;
  else
    puts &quot;No posts were found with \&quot;#{args.title}\&quot; in the title.&quot;
  end
end</code></pre></noscript></div>
</p>

<!-- more -->


<p>``` php Testing PHP (syntax_test.php)
&lt;?php
require_once($GLOBALS[&lsquo;g_campsiteDir&rsquo;]. &ldquo;/$ADMIN_DIR/country/common.php&rdquo;);
require_once($GLOBALS[&lsquo;g_campsiteDir&rsquo;]. &ldquo;/classes/SimplePager.php&rdquo;);
camp_load_translation_strings(&ldquo;api&rdquo;);</p>

<p>$f_country_language_selected = camp_session_get(&lsquo;f_language_selected&rsquo;, &lsquo;&rsquo;);
$f_country_offset = camp_session_get(&lsquo;f_country_offset&rsquo;, 0);
if (empty($f_country_language_selected)) {</p>

<pre><code>$f_country_language_selected = null;
</code></pre>

<p>}
$ItemsPerPage = 20;
$languages = Language::GetLanguages(null, null, null, array(), array(), true);
$numCountries = Country::GetNumCountries($f_country_language_selected);</p>

<p>$pager = new SimplePager($numCountries, $ItemsPerPage, &ldquo;index.php?&rdquo;);</p>

<p>$crumbs = array();
$crumbs[] = array(getGS(&ldquo;Configure&rdquo;), &ldquo;&rdquo;);
$crumbs[] = array(getGS(&ldquo;Countries&rdquo;), &ldquo;&rdquo;);
echo camp_html_breadcrumbs($crumbs);</p>

<p>?></p>

<p>&lt;?php  if ($g_user->hasPermission(&ldquo;ManageCountries&rdquo;)) { ?></p>

<table BORDER="0" CELLSPACING="0" CELLPADDING="1">
    <tr>
        <td><a href="add.php"><?php putGS("Add new"); ?></a></td>
    </tr>
</table>


<p>```</p>

<p>``` objc Testing Objective C (Cocoa1AppDelegate.m)</p>

<h1>import &ldquo;Cocoa1AppDelegate.h&rdquo;</h1>

<p>@implementation Cocoa1AppDelegate</p>

<p>@synthesize window,siteUrl,pageContents;</p>

<ul>
<li><p>(void)applicationDidFinishLaunching:(NSNotification *)aNotification
{
  // Insert code here to initialize your application
  model = [[Cocoa1Model alloc] init];
}</p></li>
<li><p>(IBAction)getSiteContents:(id)sender {
  [model setPageUrl:[siteUrl stringValue]];
  NSString* reply = [model getUrlAsString];
  NSLog(@&ldquo;pageSrc: %@&rdquo;, reply);
  [pageContents setString:reply];
  [[[pageContents textStorage] mutableString] appendString:reply];
}</p></li>
</ul>


<p>@end
```</p>

<p>``` haskell Testing Haskel (syntax_test.hs)
{&ndash;# LANGUAGE OverloadedStrings #&ndash;}
module Main where</p>

<p>&mdash;import Prelude hiding (id)
&mdash;import Control.Category (id)
import Control.Arrow ((>>>), (***), arr)
import Control.Monad (forM_)
&mdash; import Data.Monoid (mempty, mconcat)</p>

<p>&mdash; import System.FilePath</p>

<p>import Hakyll</p>

<p>main :: IO ()
main = hakyll $ do</p>

<pre><code>route   "css/*" $ setExtension "css"
compile "css/*" $ byExtension (error "Not a (S)CSS file")
    [ (".css",  compressCssCompiler)
    , (".scss", sass)
    ]

route   "js/**" idRoute
compile "js/**" copyFileCompiler

route   "img/*" idRoute
compile "img/*" copyFileCompiler

compile "templates/*" templateCompiler

forM_ ["test.md", "index.md"] $ \page -&gt; do
    route   page $ setExtension "html"
    compile page $ pageCompiler
        &gt;&gt;&gt; applyTemplateCompiler "templates/default.html"
        &gt;&gt;&gt; relativizeUrlsCompiler
</code></pre>

<p>sass :: Compiler Resource String
sass = getResourceString >>> unixFilter &ldquo;sass&rdquo; [&ldquo;-s&rdquo;, &ldquo;&mdash;scss&rdquo;]</p>

<pre><code>                     &gt;&gt;&gt; arr compressCss
</code></pre>

<p>```</p>

<p>``` sh Testing Bash (syntax_test.sh)</p>

<h1>!/bin/bash</h1>

<p>cd $ROOT_DIR
DOT_FILES=&ldquo;lastpass weechat ssh Xauthority&rdquo;
for dotfile in $DOT_FILES; do conform_link &ldquo;$DATA_DIR/$dotfile&rdquo; &ldquo;.$dotfile&rdquo;; done</p>

<h1>TODO: refactor with suffix variables (or common cron values)</h1>

<p>case &ldquo;$PLATFORM&rdquo; in</p>

<pre><code>linux)
    #conform_link "$CONF_DIR/shell/zshenv" ".zshenv"
    crontab -l &gt; $ROOT_DIR/tmp/crontab-conflict-arch
    cd $ROOT_DIR/$CONF_DIR/cron
    if [[ "$(diff ~/tmp/crontab-conflict-arch crontab-current-arch)" == ""
        ]];
        then # no difference with current backup
            logger "$LOG_PREFIX: crontab live settings match stored "\
                "settings; no restore required"
            rm ~/tmp/crontab-conflict-arch
        else # current crontab settings in file do not match live settings
            crontab $ROOT_DIR/$CONF_DIR/cron/crontab-current-arch
            logger "$LOG_PREFIX: crontab stored settings conflict with "\
                "live settings; stored settings restored. "\
                "Previous settings recorded in ~/tmp/crontab-conflict-arch."
    fi
;;
</code></pre>

<p>```</p>

<p>``` python Testing Python (syntax_test.py)</p>

<h1>test python (sample from offlineimap)</h1>

<p>class ExitNotifyThread(Thread):</p>

<pre><code>"""This class is designed to alert a "monitor" to the fact that a thread has
exited and to provide for the ability for it to find out why."""
def run(self):
    global exitthreads, profiledir
    self.threadid = thread.get_ident()
    try:
        if not profiledir:          # normal case
            Thread.run(self)
        else:
            try:
                import cProfile as profile
            except ImportError:
                import profile
            prof = profile.Profile()
            try:
                prof = prof.runctx("Thread.run(self)", globals(), locals())
            except SystemExit:
                pass
            prof.dump_stats( \
                        profiledir + "/" + str(self.threadid) + "_" + \
                        self.getName() + ".prof")
    except:
        self.setExitCause('EXCEPTION')
        if sys:
            self.setExitException(sys.exc_info()[1])
            tb = traceback.format_exc()
            self.setExitStackTrace(tb)
    else:
        self.setExitCause('NORMAL')
    if not hasattr(self, 'exitmessage'):
        self.setExitMessage(None)

    if exitthreads:
        exitthreads.put(self, True)

def setExitCause(self, cause):
    self.exitcause = cause
def getExitCause(self):
    """Returns the cause of the exit, one of:
    'EXCEPTION' -- the thread aborted because of an exception
    'NORMAL' -- normal termination."""
    return self.exitcause
def setExitException(self, exc):
    self.exitexception = exc
def getExitException(self):
    """If getExitCause() is 'EXCEPTION', holds the value from
    sys.exc_info()[1] for this exception."""
    return self.exitexception
def setExitStackTrace(self, st):
    self.exitstacktrace = st
def getExitStackTrace(self):
    """If getExitCause() is 'EXCEPTION', returns a string representing
    the stack trace for this exception."""
    return self.exitstacktrace
def setExitMessage(self, msg):
    """Sets the exit message to be fetched by a subsequent call to
    getExitMessage.  This message may be any object or type except
    None."""
    self.exitmessage = msg
def getExitMessage(self):
    """For any exit cause, returns the message previously set by
    a call to setExitMessage(), or None if there was no such message
    set."""
    return self.exitmessage
</code></pre>

<p>```</p>

<p>``` perl Testing Perl (syntax_test.pl)</p>

<h1>!perl -w</h1>

<h1>Time-stamp: &lt;2002/04/06, 13:12:13 (EST), maverick, csvformat.pl></h1>

<h1>Two pass CSV file to table formatter</h1>

<p>$delim = $#ARGV >= 1 ? $ARGV[1] : &lsquo;,&rsquo;;
print STDERR &ldquo;Split pattern: $delim\n&rdquo;;</p>

<h1>first pass</h1>

<p>open F, &ldquo;&lt;$ARGV[0]&rdquo; or die;
while(<F>)
{
  chomp;
  $i = 0;
  map { $max[$<em>&ndash;>[1]] = $</em>&ndash;>[0] if $<em>&ndash;>[0] > ($max[$</em>&ndash;>[1]] || 0) }</p>

<pre><code>(map {[length $_, $i++]} split($delim));
</code></pre>

<p>}
close F;</p>

<p>print STDERR &lsquo;Field width:   &rsquo;, join(&lsquo;, &rsquo;, @max), &ldquo;\n&rdquo;;
print STDERR join(&lsquo; &rsquo;, map {&lsquo;&ndash;&rsquo; x $_} @max);</p>

<h1>second pass</h1>

<p>open F, &ldquo;&lt;$ARGV[0]&rdquo; or die;
while(<F>)
  {
  chomp;
  $i = 0;
  map { printf(&ldquo;%&ndash;$max[$<em>&ndash;>[1]]s &rdquo;, $</em>&ndash;>[0]) }</p>

<pre><code>(map {[$_, $i++]} split($delim));
</code></pre>

<p>  print &ldquo;\n&rdquo;;
}
close F;
```</p>

<p>``` java Testing Java (syntax_test.java)
import java.util.Map;
import java.util.TreeSet;</p>

<p>public class GetEnv {
  /<em>*
   * let&rsquo;s test generics
   * @param args the command line arguments
   </em>/
  public static void main(String[] args) {</p>

<pre><code>// get a map of environment variables
Map&lt;String, String&gt; env = System.getenv();
// build a sorted set out of the keys and iterate
for(String k: new TreeSet&lt;String&gt;(env.keySet())) {
  System.out.printf("%s = %s\n", k, env.get(k));
}
</code></pre>

<p>  }
}
```</p>

<p>``` c Test C (syntax_test.c)</p>

<h1>define UNICODE</h1>

<h1>include &lt;windows.h></h1>

<p>int main(int argc, char **argv) {
  int speed = 0, speed1 = 0, speed2 = 0; // 1-20
  printf(&ldquo;Set Mouse Speed by Maverick\n&rdquo;);</p>

<p>  SystemParametersInfo(SPI_GETMOUSESPEED, 0, &amp;speed, 0);
  printf(&ldquo;Current speed: %2d\n&rdquo;, speed);</p>

<p>  if (argc == 1) return 0;
  if (argc >= 2) sscanf(argv[1], &ldquo;%d&rdquo;, &amp;speed1);
  if (argc >= 3) sscanf(argv[2], &ldquo;%d&rdquo;, &amp;speed2);</p>

<p>  if (argc == 2) // set speed to first value</p>

<pre><code>speed = speed1;
</code></pre>

<p>  else if (speed == speed1 || speed == speed2) // alternate</p>

<pre><code>speed = speed1 + speed2 - speed;
</code></pre>

<p>  else</p>

<pre><code>speed = speed1;  // start with first value
</code></pre>

<p>  SystemParametersInfo(SPI_SETMOUSESPEED, 0,  speed, 0);
  SystemParametersInfo(SPI_GETMOUSESPEED, 0, &amp;speed, 0);
  printf(&ldquo;New speed:     %2d\n&rdquo;, speed);
  return 0;
}
```</p>

<p><div><script src='https://gist.github.com/4321346.js'></script>
<noscript><pre><code>@@ -590,7 +590,7 @@ class SpritesTest &lt; Test::Unit::TestCase
  it &quot;should generate a sprite from nested folders&quot; do
    css = render &lt;&lt;-SCSS
-     @import &quot;nested/*.png&quot;;
+     @import &quot;nested/**/*.png&quot;;
      @include all-nested-sprites;
    SCSS
    assert_correct css, &lt;&lt;-CSS</code></pre></noscript></div>
</p>

<p>``` coffeescript Coffeescript Tricks</p>

<h1>Given an alphabet:</h1>

<p>alphabet = &lsquo;abcdefghijklmnopqrstuvwxyz&rsquo;</p>

<h1>Iterate over part of the alphabet:</h1>

<p>console.log letter for in alphabet[4..8]
```</p>

<p><code>ruby Test Ruby String Interpolation
puts "a#{"b#{"c#{"d"}"}"}"
</code></p>
]]></content>
  </entry>
  
</feed>
