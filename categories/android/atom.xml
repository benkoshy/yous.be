<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Yous]]></title>
  <link href="http://blog.yous.be/categories/android/atom.xml" rel="self"/>
  <link href="http://blog.yous.be/"/>
  <updated>2014-03-31T17:51:45+09:00</updated>
  <id>http://blog.yous.be/</id>
  <author>
    <name><![CDATA[Yous]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Check and Toggle WiFi or 3G/4G State in Android]]></title>
    <link href="http://blog.yous.be/2013/12/07/how-to-check-and-toggle-wifi-or-3g-4g-state-in-android/"/>
    <updated>2013-12-07T18:28:05+09:00</updated>
    <id>http://blog.yous.be/2013/12/07/how-to-check-and-toggle-wifi-or-3g-4g-state-in-android</id>
    <content type="html"><![CDATA[<h2>Overview</h2>

<ol>
<li><a href="#1">Check if WiFi or 3G/4G is Enabled (by User)</a>

<ol>
<li><a href="#1-1">WiFi</a></li>
<li><a href="#1-2">3G/4G</a></li>
</ol>
</li>
<li><a href="#2">Check if WiFi or 3G/4G is Connected</a>

<ol>
<li><a href="#2-1">WiFi</a></li>
<li><a href="#2-2">3G/4G</a></li>
</ol>
</li>
<li><a href="#3">Toggle WiFi or 3G/4G Programmatically</a>

<ol>
<li><a href="#3-1">WiFi</a></li>
<li><a href="#3-2">3G/4G</a></li>
</ol>
</li>
</ol>


<p>At some point, we want to know whether the device is connected to network so that we can do some network processes. Also we want to know if <em>user</em> make WiFi or 3G/4G disabled on purpose. Both things are able to know.</p>

<!-- more -->


<p><a id="1"></a></p>

<h2>1. Check if WiFi or 3G/4G is Enabled (by User)</h2>

<p><a id="1-1"></a></p>

<h3>WiFi</h3>

<p><code>ACCESS_WIFI_STATE</code> permission must be added to <code>AndroidManifest.xml</code>.</p>

<p><code>xml AndroidManifest.xml
&lt;uses-permission android:name="android.permission.ACCESS_WIFI_STATE" /&gt;
</code></p>

<p>Checking code is simple. In activity, <a href="http://developer.android.com/reference/android/net/wifi/WifiManager.html">WifiManager</a> has a handy method.</p>

<p><code>java
WifiManager wifiManager = (WifiManager) getSystemService(WIFI_SERVICE);
boolean wifiEnabled = wifiManager.isWifiEnabled();
</code></p>

<p><a id="1-2"></a></p>

<h3>3G/4G</h3>

<p>This is more complicated. As WiFi case, we have to add <code>ACCESS_NETWORK_STATE</code> permission.</p>

<p><code>xml AndroidManifest.xml
&lt;uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" /&gt;
</code></p>

<p>Then we get <a href="http://developer.android.com/reference/android/net/NetworkInfo.html">NetworkInfo</a> from <a href="http://developer.android.com/reference/android/net/ConnectivityManager.html">ConnectivityManager</a>.</p>

<p>``` java
ConnectivityManager connectivityManager =</p>

<pre><code>(ConnectivityManager) getSystemService(CONNECTIVITY_SERVICE);
</code></pre>

<p>NetworkInfo mobileInfo =</p>

<pre><code>connectivityManager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
</code></pre>

<p>```</p>

<p>See <a href="http://developer.android.com/reference/android/net/NetworkInfo.html#getState()">getState()</a> overview.</p>

<blockquote><p>Reports the current coarse-grained state of the network.</p></blockquote>

<p>There are 6 types of <a href="http://developer.android.com/reference/android/net/NetworkInfo.State.html">NetworkInfo.State</a>.</p>

<ul>
<li><code>CONNECTED</code></li>
<li><code>CONNECTING</code></li>
<li><code>DISCONNECTED</code></li>
<li><code>DISCONNECTING</code></li>
<li><code>SUSPENDED</code></li>
<li><code>UNKNOWN</code></li>
</ul>


<p>Also this is <a href="http://developer.android.com/reference/android/net/NetworkInfo.html#getReason()">getReason()</a> overview.</p>

<blockquote><p>Report the reason an attempt to establish connectivity failed, if one is available.</p></blockquote>

<p>We can realize that when <code>NetworkInfo.State</code> is <code>DISCONNECTED</code>, <code>getReason()</code> reports to us why mobile data is disconnected.</p>

<p>Also I tested several times with <code>getState()</code> and <code>getReason()</code>.</p>

<ul>
<li><p>Enable WiFi and 3G/4G</p>

<p>When WiFi is connected, mobile data connection automatically closed.</p></li>
</ul>


<p><code>java
mobileInfo.getState()
// =&gt; DISCONNECTED
mobileInfo.getReason()
// =&gt; "dataDisabled"
</code></p>

<ul>
<li>Enable WiFi only</li>
</ul>


<p><code>java
mobileInfo.getState()
// =&gt; DISCONNECTED
mobileInfo.getReason()
// =&gt; "specificDisabled"
</code></p>

<ul>
<li>Enable 3G/4G only</li>
</ul>


<p><code>java
mobileInfo.getState()
// =&gt; CONNECTED
</code></p>

<ul>
<li>Disable both</li>
</ul>


<p><code>java
mobileInfo.getState()
// =&gt; DISCONNECTED
mobileInfo.getReason()
// =&gt; "specificDisabled"
</code></p>

<p>So the code would be like this.</p>

<p>``` java
String reason = mobileInfo.getReason();
boolean mobileDisabled = mobileInfo.getState() == NetworkInfo.State.DISCONNECTED</p>

<pre><code>&amp;&amp; (reason == null || reason.equals("specificDisabled"));
</code></pre>

<p>```</p>

<p><a id="2"></a></p>

<h2>2. Check if WiFi or 3G/4G is Connected</h2>

<p>WiFi or 3G/4G may not be connected even if the user enables them. Checking connectivity is useful when we are going to do some network communication.</p>

<p><a id="2-1"></a></p>

<h3>WiFi</h3>

<p>``` java
NetworkInfo wifiInfo =</p>

<pre><code>connectivityManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
</code></pre>

<p>boolean wifiConnected = wifiInfo.getState() == NetworkInfo.State.CONNECTED;
```</p>

<p><a id="2-2"></a></p>

<h3>3G/4G</h3>

<p>``` java
NetworkInfo mobileInfo =</p>

<pre><code>connectivityManager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
</code></pre>

<p>boolean mobileConnected = mobileInfo.getState() == NetworkInfo.State.CONNECTED;
```</p>

<p><a id="3"></a></p>

<h2>3. Toggle WiFi or 3G/4G Programmatically</h2>

<p><a id="3-1"></a></p>

<h3>WiFi</h3>

<p><code>CHANGE_WIFI_STATE</code> permission must be added to <code>AndroidManifest.xml</code>.</p>

<p><code>xml AndroidManifest.xml
&lt;uses-permission android:name="android.permission.CHANGE_WIFI_STATE" /&gt;
</code></p>

<p>Enabling or disabling WiFi is easy.</p>

<p><code>java
WifiManager wifiManager = (WifiManager) getSystemService(WIFI_SERVICE);
wifiManager.setWifiEnabled(isWifiEnabled);
</code></p>

<p><a id="3-2"></a></p>

<h3>3G/4G</h3>

<p>There is an workaround with reflection on <a href="http://stackoverflow.com/questions/12535101/how-can-i-turn-off-3g-data-programmatically-on-android#12535246">&ldquo;How can i turn off 3G/Data programmatically on Android?&rdquo;</a>.</p>

<p>For Android 2.3 and above:</p>

<p>``` java
private void setMobileDataEnabled(Context context, boolean enabled) {
  final ConnectivityManager conman =</p>

<pre><code>  (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
</code></pre>

<p>  try {</p>

<pre><code>final Class conmanClass = Class.forName(conman.getClass().getName());
final Field iConnectivityManagerField = conmanClass.getDeclaredField("mService");
iConnectivityManagerField.setAccessible(true);
final Object iConnectivityManager = iConnectivityManagerField.get(conman);
final Class iConnectivityManagerClass = Class.forName(
    iConnectivityManager.getClass().getName());
final Method setMobileDataEnabledMethod = iConnectivityManagerClass
    .getDeclaredMethod("setMobileDataEnabled", Boolean.TYPE);
setMobileDataEnabledMethod.setAccessible(true);

setMobileDataEnabledMethod.invoke(iConnectivityManager, enabled);
</code></pre>

<p>  } catch (ClassNotFoundException e) {</p>

<pre><code>e.printStackTrace();
</code></pre>

<p>  } catch (InvocationTargetException e) {</p>

<pre><code>e.printStackTrace();
</code></pre>

<p>  } catch (NoSuchMethodException e) {</p>

<pre><code>e.printStackTrace();
</code></pre>

<p>  } catch (IllegalAccessException e) {</p>

<pre><code>e.printStackTrace();
</code></pre>

<p>  } catch (NoSuchFieldException e) {</p>

<pre><code>e.printStackTrace();
</code></pre>

<p>  }
}
```</p>

<p>It requires to <code>CHANGE_NETWORK_STATE</code> permission.</p>

<p><code>xml AndroidManifest.xml
&lt;uses-permission android:name="android.permission.CHANGE_NETWORK_STATE" /&gt;
</code></p>

<p>In Activity:</p>

<p><code>java
setMobileDataEnabled(this, isMobileDataEnabled);
</code></p>

<p>Codes for Android 2.2 and below are also in the same <a href="http://stackoverflow.com/questions/12535101/how-can-i-turn-off-3g-data-programmatically-on-android#12535246">answer</a>, but it requires <code>MODIFY_PHONE_STATE</code> permission that can be used by <a href="http://developer.android.com/reference/android/Manifest.permission.html#MODIFY_PHONE_STATE">system applications only</a>.</p>
]]></content>
  </entry>
  
</feed>
